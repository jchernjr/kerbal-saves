// Compiled shader for all platforms, uncompressed size: 2508.3KB

// Skipping shader variants that would not be included into build of current scene.

Shader "EVE/CloudShadow" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _MainTex ("Main (RGB)", 2D) = "white" { }
 _DetailTex ("Detail (RGB)", 2D) = "white" { }
 _DetailScale ("Detail Scale", Float) = 100
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _PlanetOrigin ("Sphere Center", Vector) = (0,0,0,1)
 _SunDir ("Sunlight direction", Vector) = (0,0,0,1)
 _Radius ("Radius", Float) = 1
 _PlanetRadius ("Planet Radius", Float) = 1
 _ShadowFactor ("Shadow Factor", Float) = 1
}
SubShader { 


 // Stats for Vertex shader:
 //       d3d11 : 48 avg math (48..49)
 //        d3d9 : 52 avg math (51..53)
 //        gles : 95 avg math (55..129), 3 avg texture (2..7), 0 avg branch (0..3)
 //       metal : 43 math
 //      opengl : 95 avg math (55..129), 3 avg texture (2..7), 0 avg branch (0..3)
 // Stats for Fragment shader:
 //       d3d11 : 82 avg math (53..95), 0 avg texture (0..1)
 //        d3d9 : 82 avg math (55..100), 10 avg texture (4..21)
 //       metal : 95 avg math (55..129), 3 avg texture (2..7), 0 avg branch (0..3)
 Pass {
  ZWrite Off
  Blend Zero SrcColor
  GpuProgramID 60774
Program "vp" {
SubProgram "opengl " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  vec2 uv_11;
  vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_10);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, mix (tmpvar_10.x, tmpvar_10.z, tmpvar_13), tmpvar_14));
  vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, 1.0);
  tmpvar_16.y = -(tmpvar_15);
  vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, 1.0);
  tmpvar_17.y = tmpvar_15;
  vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = -(tmpvar_15);
  vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_10.yxz), mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(tmpvar_13)), vec3(tmpvar_14));
  uv_11.x = (((0.5 * tmpvar_19.y) / abs(tmpvar_19.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_19.z) / abs(tmpvar_19.x)) + 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_11 * _DetailScale);
  vec2 uvCont_21;
  vec2 tmpvar_22;
  tmpvar_22 = abs((tmpvar_20 - (0.5 * _DetailScale)));
  uvCont_21.x = max (tmpvar_22.x, tmpvar_22.y);
  uvCont_21.y = min (tmpvar_22.x, tmpvar_22.y);
  vec4 tmpvar_23;
  tmpvar_23.xy = dFdx(uvCont_21);
  tmpvar_23.zw = dFdy(uvCont_21);
  vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = ((_Color * texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw)) * mix (texture2DGradARB (_DetailTex, tmpvar_20, tmpvar_23.xy, tmpvar_23.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_24, tmpvar_24)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_25.w;
  color_1.xyz = clamp ((tmpvar_25.xyz * (1.0 - tmpvar_25.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_25.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_15;
  mediump float s_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_14);
  highp float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  zxlerp_18 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  nylerp_17 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_14.x, tmpvar_14.z, zxlerp_18);
  s_16 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_14.y, s_16, nylerp_17));
  s_16 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = -(s_16);
  mediump vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = s_16;
  mediump vec3 tmpvar_26;
  tmpvar_26.xy = vec2(1.0, 1.0);
  tmpvar_26.z = -(s_16);
  highp vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_26 * tmpvar_14.yxz), mix ((tmpvar_24 * tmpvar_14.xzy), (tmpvar_25 * tmpvar_14.zxy), vec3(zxlerp_18)), vec3(nylerp_17));
  uv_15.x = (((0.5 * tmpvar_27.y) / abs(tmpvar_27.x)) + 0.5);
  uv_15.y = (((0.5 * tmpvar_27.z) / abs(tmpvar_27.x)) + 0.5);
  highp vec2 tmpvar_28;
  tmpvar_28 = (uv_15 * _DetailScale);
  highp vec2 uvCont_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - (0.5 * _DetailScale)));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  highp vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_DetailTex, tmpvar_28, tmpvar_31.xy, tmpvar_31.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  highp vec3 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_34, tmpvar_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_33, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  color_2 = tmpvar_37;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_38;
  tmpvar_38 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_0 = t10_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0 = t10_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 v_14;
  v_14 = (tmpvar_13 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_17;
  mediump float s_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  highp float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, zxlerp_20);
  s_18 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, s_18, nylerp_19));
  s_18 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = -(s_18);
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = s_18;
  mediump vec3 tmpvar_28;
  tmpvar_28.xy = vec2(1.0, 1.0);
  tmpvar_28.z = -(s_18);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_28 * tmpvar_16.yxz), mix ((tmpvar_26 * tmpvar_16.xzy), (tmpvar_27 * tmpvar_16.zxy), vec3(zxlerp_20)), vec3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_17 * _DetailScale);
  highp vec2 uvCont_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_31);
  tmpvar_33.zw = dFdy(uvCont_31);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  highp vec3 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_35, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).x;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).yzwx;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 v_14;
  v_14 = (tmpvar_13 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_17;
  mediump float s_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  highp float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, zxlerp_20);
  s_18 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, s_18, nylerp_19));
  s_18 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = -(s_18);
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = s_18;
  mediump vec3 tmpvar_28;
  tmpvar_28.xy = vec2(1.0, 1.0);
  tmpvar_28.z = -(s_18);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_28 * tmpvar_16.yxz), mix ((tmpvar_26 * tmpvar_16.xzy), (tmpvar_27 * tmpvar_16.zxy), vec3(zxlerp_20)), vec3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_17 * _DetailScale);
  highp vec2 uvCont_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_31);
  tmpvar_33.zw = dFdy(uvCont_31);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  highp vec3 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_35, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).y;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).xzwy;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 v_14;
  v_14 = (tmpvar_13 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_17;
  mediump float s_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  highp float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, zxlerp_20);
  s_18 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, s_18, nylerp_19));
  s_18 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = -(s_18);
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = s_18;
  mediump vec3 tmpvar_28;
  tmpvar_28.xy = vec2(1.0, 1.0);
  tmpvar_28.z = -(s_18);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_28 * tmpvar_16.yxz), mix ((tmpvar_26 * tmpvar_16.xzy), (tmpvar_27 * tmpvar_16.zxy), vec3(zxlerp_20)), vec3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_17 * _DetailScale);
  highp vec2 uvCont_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_31);
  tmpvar_33.zw = dFdy(uvCont_31);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  highp vec3 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_35, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).z;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).xywz;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 v_14;
  v_14 = (tmpvar_13 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_17;
  mediump float s_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  highp float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, zxlerp_20);
  s_18 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, s_18, nylerp_19));
  s_18 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = -(s_18);
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = s_18;
  mediump vec3 tmpvar_28;
  tmpvar_28.xy = vec2(1.0, 1.0);
  tmpvar_28.z = -(s_18);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_28 * tmpvar_16.yxz), mix ((tmpvar_26 * tmpvar_16.xzy), (tmpvar_27 * tmpvar_16.zxy), vec3(zxlerp_20)), vec3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30 = (uv_17 * _DetailScale);
  highp vec2 uvCont_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_31);
  tmpvar_33.zw = dFdy(uvCont_31);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, tmpvar_30, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  highp vec3 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_35, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).w;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD5);
  vec2 uv_3;
  vec3 tmpvar_4;
  tmpvar_4 = abs(tmpvar_2);
  float tmpvar_5;
  tmpvar_5 = float((tmpvar_4.z >= tmpvar_4.x));
  float tmpvar_6;
  tmpvar_6 = float((max (tmpvar_4.x, tmpvar_4.z) >= tmpvar_4.y));
  float tmpvar_7;
  tmpvar_7 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_5), tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, 1.0);
  tmpvar_8.y = -(tmpvar_7);
  vec3 tmpvar_9;
  tmpvar_9.xz = vec2(1.0, 1.0);
  tmpvar_9.y = tmpvar_7;
  vec3 tmpvar_10;
  tmpvar_10.xy = vec2(1.0, 1.0);
  tmpvar_10.z = -(tmpvar_7);
  vec3 tmpvar_11;
  tmpvar_11 = mix ((tmpvar_10 * tmpvar_2.yxz), mix ((tmpvar_8 * tmpvar_2.xzy), (tmpvar_9 * tmpvar_2.zxy), vec3(tmpvar_5)), vec3(tmpvar_6));
  uv_3.x = (((0.5 * tmpvar_11.y) / abs(tmpvar_11.x)) + 0.5);
  uv_3.y = (((0.5 * tmpvar_11.z) / abs(tmpvar_11.x)) + 0.5);
  vec2 tmpvar_12;
  tmpvar_12 = (uv_3 * _DetailScale);
  vec2 uvCont_13;
  vec2 tmpvar_14;
  tmpvar_14 = abs((tmpvar_12 - (0.5 * _DetailScale)));
  uvCont_13.x = max (tmpvar_14.x, tmpvar_14.y);
  uvCont_13.y = min (tmpvar_14.x, tmpvar_14.y);
  vec4 tmpvar_15;
  tmpvar_15.xy = dFdx(uvCont_13);
  tmpvar_15.zw = dFdy(uvCont_13);
  vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_17;
  tmpvar_17 = ((_Color * textureCube (cube_MainTex, normalize(xlv_TEXCOORD4))) * mix (texture2DGradARB (_DetailTex, tmpvar_12, tmpvar_15.xy, tmpvar_15.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_16, tmpvar_16)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_17.w;
  color_1.xyz = clamp ((tmpvar_17.xyz * (1.0 - tmpvar_17.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_17.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_9;
  mediump float s_10;
  mediump float nylerp_11;
  mediump float zxlerp_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(tmpvar_8);
  highp float tmpvar_14;
  tmpvar_14 = float((tmpvar_13.z >= tmpvar_13.x));
  zxlerp_12 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = float((max (tmpvar_13.x, tmpvar_13.z) >= tmpvar_13.y));
  nylerp_11 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_8.x, tmpvar_8.z, zxlerp_12);
  s_10 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_8.y, s_10, nylerp_11));
  s_10 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(s_10);
  mediump vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = s_10;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(s_10);
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_8.yxz), mix ((tmpvar_18 * tmpvar_8.xzy), (tmpvar_19 * tmpvar_8.zxy), vec3(zxlerp_12)), vec3(nylerp_11));
  uv_9.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_9.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22 = (uv_9 * _DetailScale);
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  highp vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_28, tmpvar_28)
  )), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = ((_Color * tmpvar_7) * mix (tmpvar_27, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_29)));
  color_2 = tmpvar_31;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_32;
  tmpvar_32 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t3.xyz);
    t16_1 = t10_1 * _Color;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1 = t10_1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec4 v_8;
  v_8 = (tmpvar_7 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_11;
  mediump float s_12;
  mediump float nylerp_13;
  mediump float zxlerp_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  highp float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_14);
  s_12 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, s_12, nylerp_13));
  s_12 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, 1.0);
  tmpvar_20.y = -(s_12);
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = s_12;
  mediump vec3 tmpvar_22;
  tmpvar_22.xy = vec2(1.0, 1.0);
  tmpvar_22.z = -(s_12);
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_22 * tmpvar_10.yxz), mix ((tmpvar_20 * tmpvar_10.xzy), (tmpvar_21 * tmpvar_10.zxy), vec3(zxlerp_14)), vec3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  highp vec2 tmpvar_24;
  tmpvar_24 = (uv_11 * _DetailScale);
  highp vec2 uvCont_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_DetailTex, tmpvar_24, tmpvar_27.xy, tmpvar_27.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  highp vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_9) * mix (tmpvar_29, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).x;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).yzwx;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec4 v_8;
  v_8 = (tmpvar_7 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_11;
  mediump float s_12;
  mediump float nylerp_13;
  mediump float zxlerp_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  highp float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_14);
  s_12 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, s_12, nylerp_13));
  s_12 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, 1.0);
  tmpvar_20.y = -(s_12);
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = s_12;
  mediump vec3 tmpvar_22;
  tmpvar_22.xy = vec2(1.0, 1.0);
  tmpvar_22.z = -(s_12);
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_22 * tmpvar_10.yxz), mix ((tmpvar_20 * tmpvar_10.xzy), (tmpvar_21 * tmpvar_10.zxy), vec3(zxlerp_14)), vec3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  highp vec2 tmpvar_24;
  tmpvar_24 = (uv_11 * _DetailScale);
  highp vec2 uvCont_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_DetailTex, tmpvar_24, tmpvar_27.xy, tmpvar_27.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  highp vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_9) * mix (tmpvar_29, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).y;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).xzwy;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec4 v_8;
  v_8 = (tmpvar_7 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_11;
  mediump float s_12;
  mediump float nylerp_13;
  mediump float zxlerp_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  highp float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_14);
  s_12 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, s_12, nylerp_13));
  s_12 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, 1.0);
  tmpvar_20.y = -(s_12);
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = s_12;
  mediump vec3 tmpvar_22;
  tmpvar_22.xy = vec2(1.0, 1.0);
  tmpvar_22.z = -(s_12);
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_22 * tmpvar_10.yxz), mix ((tmpvar_20 * tmpvar_10.xzy), (tmpvar_21 * tmpvar_10.zxy), vec3(zxlerp_14)), vec3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  highp vec2 tmpvar_24;
  tmpvar_24 = (uv_11 * _DetailScale);
  highp vec2 uvCont_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_DetailTex, tmpvar_24, tmpvar_27.xy, tmpvar_27.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  highp vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_9) * mix (tmpvar_29, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).z;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).xywz;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec4 v_8;
  v_8 = (tmpvar_7 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_11;
  mediump float s_12;
  mediump float nylerp_13;
  mediump float zxlerp_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  highp float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_14);
  s_12 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, s_12, nylerp_13));
  s_12 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, 1.0);
  tmpvar_20.y = -(s_12);
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = s_12;
  mediump vec3 tmpvar_22;
  tmpvar_22.xy = vec2(1.0, 1.0);
  tmpvar_22.z = -(s_12);
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_22 * tmpvar_10.yxz), mix ((tmpvar_20 * tmpvar_10.xzy), (tmpvar_21 * tmpvar_10.zxy), vec3(zxlerp_14)), vec3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  highp vec2 tmpvar_24;
  tmpvar_24 = (uv_11 * _DetailScale);
  highp vec2 uvCont_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_DetailTex, tmpvar_24, tmpvar_27.xy, tmpvar_27.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  highp vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_9) * mix (tmpvar_29, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).w;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz);
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 89 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 89 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_32;
  mediump float s_33;
  mediump float nylerp_34;
  mediump float zxlerp_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_31);
  highp float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  zxlerp_35 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  nylerp_34 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = mix (tmpvar_31.x, tmpvar_31.z, zxlerp_35);
  s_33 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = sign(mix (tmpvar_31.y, s_33, nylerp_34));
  s_33 = tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_41.xz = vec2(1.0, 1.0);
  tmpvar_41.y = -(s_33);
  mediump vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, 1.0);
  tmpvar_42.y = s_33;
  mediump vec3 tmpvar_43;
  tmpvar_43.xy = vec2(1.0, 1.0);
  tmpvar_43.z = -(s_33);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_43 * tmpvar_31.yxz), mix ((tmpvar_41 * tmpvar_31.xzy), (tmpvar_42 * tmpvar_31.zxy), vec3(zxlerp_35)), vec3(nylerp_34));
  uv_32.x = (((0.5 * tmpvar_44.y) / abs(tmpvar_44.x)) + 0.5);
  uv_32.y = (((0.5 * tmpvar_44.z) / abs(tmpvar_44.x)) + 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45 = (uv_32 * _DetailScale);
  highp vec2 uvCont_46;
  highp vec2 tmpvar_47;
  tmpvar_47 = abs((tmpvar_45 - (0.5 * _DetailScale)));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  highp vec4 tmpvar_48;
  tmpvar_48.xy = dFdx(uvCont_46);
  tmpvar_48.zw = dFdy(uvCont_46);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DGradEXT (_DetailTex, tmpvar_45, tmpvar_48.xy, tmpvar_48.zw);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  highp vec3 tmpvar_51;
  tmpvar_51 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_51, tmpvar_51)
  )), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = ((_Color * tmpvar_30) * mix (tmpvar_50, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_52)));
  color_2 = tmpvar_54;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_56;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump float t16_6;
highp vec3 t7;
lowp vec3 t10_8;
mediump vec2 t16_9;
highp vec3 t10;
highp vec3 t11;
bool tb11;
highp float t13;
mediump vec3 t16_13;
bool tb13;
mediump float t16_18;
highp vec2 t20;
highp int ti20;
highp int ti22;
bool tb28;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t10.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t10.y);
    tb11 = abs(t10.z)>=abs(t10.y);
    t11.x = tb11 ? 1.0 : float(0.0);
    t2.x = t11.x * t2.x + t10.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t10.y) + abs(t10.z);
    t2.x = t11.x * t2.x + abs(t10.y);
    tb2 = t2.x>=abs(t10.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t10.x);
    ti20 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti20) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t10.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t10.zyx + (-t4.xyz);
    t4.xyz = t11.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t10.xyz + t4.xyz;
    t1.xyz = t10.xyz * t16_3.xxy;
    tb28 = t16_3.y>=0.0;
    t16_0.x = (tb28) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_9.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_9.xy = t16_9.xy / abs(t1.xx);
    t16_3.xy = t16_9.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_9.y), abs(t16_9.x));
    t1.y = min(abs(t16_9.y), abs(t16_9.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_18 = (-t16_0.x) + t16_0.z;
    t16_0.x = t11.x * t16_18 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_1.w = t2.x * t16_0.x + t16_0.y;
    t16_1.xyz = t16_0.www;
    t16_0 = t16_1 * _Color;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t11.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t11.x);
    tb13 = abs(t11.z)>=abs(t11.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t4.x = t13 * t4.x + t11.x;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t11.z), abs(t11.x));
    tb4 = t4.x>=abs(t11.y);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t11.y;
    ti22 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti22) + ti2;
    t16_6 = float(ti2);
    t5.y = t11.x * t16_6;
    t7.z = t11.z * (-t16_6);
    t5.xz = t11.zy;
    t7.xy = t11.yx;
    t2.xyz = t5.xyz + (-t7.yzx);
    t2.xyz = vec3(t13) * t2.xyz + t7.yzx;
    t2.xyz = (-t7.xyz) + t2.xyz;
    t2.xyz = t4.xxx * t2.xyz + t7.xyz;
    t11.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t2.xy = t11.xy / abs(t2.xx);
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = t2.xy * vec2(_DetailScale);
    t20.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t20.x);
    t4.y = dFdy(t20.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_8.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_8.xyz = t10_8.xxx * t16_2.xyz;
    t10_8.xyz = clamp(t10_8.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_13.xyz = t10_8.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_13.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
mediump vec4 t16_4;
vec3 t5;
lowp vec4 t10_5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
float t12;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t1.w = t19 * t0.x + t0.y;
    t1.xyz = t0.www;
    t0 = t1 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  mediump vec4 v_31;
  v_31 = (tmpvar_30 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, 1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = s_35;
  mediump vec3 tmpvar_45;
  tmpvar_45.xy = vec2(1.0, 1.0);
  tmpvar_45.z = -(s_35);
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_45 * tmpvar_33.yxz), mix ((tmpvar_43 * tmpvar_33.xzy), (tmpvar_44 * tmpvar_33.zxy), vec3(zxlerp_37)), vec3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47 = (uv_34 * _DetailScale);
  highp vec2 uvCont_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  highp vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DetailTex, tmpvar_47, tmpvar_50.xy, tmpvar_50.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = ((_Color * tmpvar_32) * mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  mediump vec4 v_31;
  v_31 = (tmpvar_30 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, 1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = s_35;
  mediump vec3 tmpvar_45;
  tmpvar_45.xy = vec2(1.0, 1.0);
  tmpvar_45.z = -(s_35);
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_45 * tmpvar_33.yxz), mix ((tmpvar_43 * tmpvar_33.xzy), (tmpvar_44 * tmpvar_33.zxy), vec3(zxlerp_37)), vec3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47 = (uv_34 * _DetailScale);
  highp vec2 uvCont_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  highp vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DetailTex, tmpvar_47, tmpvar_50.xy, tmpvar_50.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = ((_Color * tmpvar_32) * mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  mediump vec4 v_31;
  v_31 = (tmpvar_30 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, 1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = s_35;
  mediump vec3 tmpvar_45;
  tmpvar_45.xy = vec2(1.0, 1.0);
  tmpvar_45.z = -(s_35);
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_45 * tmpvar_33.yxz), mix ((tmpvar_43 * tmpvar_33.xzy), (tmpvar_44 * tmpvar_33.zxy), vec3(zxlerp_37)), vec3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47 = (uv_34 * _DetailScale);
  highp vec2 uvCont_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  highp vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DetailTex, tmpvar_47, tmpvar_50.xy, tmpvar_50.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = ((_Color * tmpvar_32) * mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  mediump vec4 v_31;
  v_31 = (tmpvar_30 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, zxlerp_37);
  s_35 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, s_35, nylerp_36));
  s_35 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, 1.0);
  tmpvar_43.y = -(s_35);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = s_35;
  mediump vec3 tmpvar_45;
  tmpvar_45.xy = vec2(1.0, 1.0);
  tmpvar_45.z = -(s_35);
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_45 * tmpvar_33.yxz), mix ((tmpvar_43 * tmpvar_33.xzy), (tmpvar_44 * tmpvar_33.zxy), vec3(zxlerp_37)), vec3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47 = (uv_34 * _DetailScale);
  highp vec2 uvCont_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  highp vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DetailTex, tmpvar_47, tmpvar_50.xy, tmpvar_50.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = ((_Color * tmpvar_32) * mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp float t9;
bool tb9;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9 * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.xyz = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t16_7.xyz = t10_1.xyz + (-t10_4.xyz);
    t16_0.xyz = t16_0.xxx * t16_7.xyz + t10_4.xyz;
    t16_14 = (-t16_0.x) + t16_0.z;
    t16_0.x = t9 * t16_14 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.w = t2.x * t16_0.x + t16_0.y;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump vec3 t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
float t12;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0.xyz = (-t10_3.xyz) + t10_5.xyz;
    t0.xyz = vec3(t18) * t16_0.xyz + t10_3.xyz;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t0.w = t19 * t0.x + t0.y;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD5);
  vec2 uv_16;
  vec3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_15);
  float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_18), tmpvar_19));
  vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(tmpvar_20);
  vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = tmpvar_20;
  vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(tmpvar_20);
  vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_15.yxz), mix ((tmpvar_21 * tmpvar_15.xzy), (tmpvar_22 * tmpvar_15.zxy), vec3(tmpvar_18)), vec3(tmpvar_19));
  uv_16.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_16.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  vec2 tmpvar_25;
  tmpvar_25 = (uv_16 * _DetailScale);
  vec2 uvCont_26;
  vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_30;
  tmpvar_30 = ((_Color * mix (
    mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), vec4(tmpvar_4))
  , vec4(tmpvar_5))) * mix (texture2DGradARB (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_29, tmpvar_29)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_30.w;
  color_1.xyz = clamp ((tmpvar_30.xyz * (1.0 - tmpvar_30.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_30.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_38;
  mediump float s_39;
  mediump float nylerp_40;
  mediump float zxlerp_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_37);
  highp float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_41 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_40 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = mix (tmpvar_37.x, tmpvar_37.z, zxlerp_41);
  s_39 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_37.y, s_39, nylerp_40));
  s_39 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xz = vec2(1.0, 1.0);
  tmpvar_47.y = -(s_39);
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, 1.0);
  tmpvar_48.y = s_39;
  mediump vec3 tmpvar_49;
  tmpvar_49.xy = vec2(1.0, 1.0);
  tmpvar_49.z = -(s_39);
  highp vec3 tmpvar_50;
  tmpvar_50 = mix ((tmpvar_49 * tmpvar_37.yxz), mix ((tmpvar_47 * tmpvar_37.xzy), (tmpvar_48 * tmpvar_37.zxy), vec3(zxlerp_41)), vec3(nylerp_40));
  uv_38.x = (((0.5 * tmpvar_50.y) / abs(tmpvar_50.x)) + 0.5);
  uv_38.y = (((0.5 * tmpvar_50.z) / abs(tmpvar_50.x)) + 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_38 * _DetailScale);
  highp vec2 uvCont_52;
  highp vec2 tmpvar_53;
  tmpvar_53 = abs((tmpvar_51 - (0.5 * _DetailScale)));
  uvCont_52.x = max (tmpvar_53.x, tmpvar_53.y);
  uvCont_52.y = min (tmpvar_53.x, tmpvar_53.y);
  highp vec4 tmpvar_54;
  tmpvar_54.xy = dFdx(uvCont_52);
  tmpvar_54.zw = dFdy(uvCont_52);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_DetailTex, tmpvar_51, tmpvar_54.xy, tmpvar_54.zw);
  mediump vec4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  highp vec3 tmpvar_57;
  tmpvar_57 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_57, tmpvar_57)
  )), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = ((_Color * mix (
    mix (tmpvar_30, tmpvar_32, vec4(float((s_7 >= 0.0))))
  , 
    mix (mix (tmpvar_26, tmpvar_28, vec4(float((s_7 >= 0.0)))), mix (tmpvar_34, tmpvar_36, vec4(float((s_7 >= 0.0)))), vec4(zxlerp_9))
  , vec4(nylerp_8))) * mix (tmpvar_56, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_58)));
  color_2 = tmpvar_60;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_62;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump float t16_8;
highp vec3 t9;
lowp vec3 t10_10;
mediump vec2 t16_11;
highp vec3 t12;
highp vec3 t13;
bool tb13;
highp float t16;
mediump vec3 t16_16;
bool tb16;
highp vec2 t24;
highp int ti24;
highp int ti27;
bool tb34;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t2.x = t13.x * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2 = t2.x>=abs(t12.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t1.xyz = t12.xyz * t16_3.xxy;
    tb34 = t16_3.y>=0.0;
    t16_0.x = (tb34) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_11.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t1.xx);
    t16_3.xy = t16_11.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_11.y), abs(t16_11.x));
    t1.y = min(abs(t16_11.y), abs(t16_11.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t13.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0 = t16_0 * _Color;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t13.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t13.x);
    tb16 = abs(t13.z)>=abs(t13.x);
    t16 = tb16 ? 1.0 : float(0.0);
    t5.x = t16 * t5.x + t13.x;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t13.z), abs(t13.x));
    tb5 = t5.x>=abs(t13.y);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t13.y;
    ti27 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti27) + ti2;
    t16_8 = float(ti2);
    t7.y = t13.x * t16_8;
    t9.z = t13.z * (-t16_8);
    t7.xz = t13.zy;
    t9.xy = t13.yx;
    t2.xyz = t7.xyz + (-t9.yzx);
    t2.xyz = vec3(t16) * t2.xyz + t9.yzx;
    t2.xyz = (-t9.xyz) + t2.xyz;
    t2.xyz = t5.xxx * t2.xyz + t9.xyz;
    t13.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t2.xy = t13.xy / abs(t2.xx);
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = t2.xy * vec2(_DetailScale);
    t24.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t24.y), abs(t24.x));
    t24.x = min(abs(t24.y), abs(t24.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t24.x);
    t5.y = dFdy(t24.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_10.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_10.xyz = t10_10.xxx * t16_2.xyz;
    t10_10.xyz = clamp(t10_10.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_16.xyz = t10_10.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_16.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec3 t9;
vec3 t10;
int ti10;
bool tb10;
vec2 t17;
int ti18;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.x)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.x), abs(t9.y));
    tb2 = t2.x>=abs(t9.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.z;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t9.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t9.xyz + (-t5.yzx);
    t10.xyz = t10.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t9.zyx + t10.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, vec4(
    float((s_7 >= 0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, vec4(float((s_7 >= 0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, vec4(float((s_7 >= 0.0))))
  , vec4(zxlerp_9)), vec4(nylerp_8)) * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  highp float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, zxlerp_43);
  s_41 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, s_41, nylerp_42));
  s_41 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, 1.0);
  tmpvar_49.y = -(s_41);
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = s_41;
  mediump vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = -(s_41);
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_39.yxz), mix ((tmpvar_49 * tmpvar_39.xzy), (tmpvar_50 * tmpvar_39.zxy), vec3(zxlerp_43)), vec3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53 = (uv_40 * _DetailScale);
  highp vec2 uvCont_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_54);
  tmpvar_56.zw = dFdy(uvCont_54);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_DetailTex, tmpvar_53, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = ((_Color * tmpvar_38) * mix (tmpvar_58, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.x + (-t10_6.x);
    t0.x = t21 * t16_0 + t10_6.x;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.x + (-t10_6.x);
    t7.x = t21 * t16_7 + t10_6.x;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.x + (-t10_3.x);
    t7.x = t21 * t16_7 + t10_3.x;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, vec4(
    float((s_7 >= 0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, vec4(float((s_7 >= 0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, vec4(float((s_7 >= 0.0))))
  , vec4(zxlerp_9)), vec4(nylerp_8)) * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  highp float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, zxlerp_43);
  s_41 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, s_41, nylerp_42));
  s_41 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, 1.0);
  tmpvar_49.y = -(s_41);
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = s_41;
  mediump vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = -(s_41);
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_39.yxz), mix ((tmpvar_49 * tmpvar_39.xzy), (tmpvar_50 * tmpvar_39.zxy), vec3(zxlerp_43)), vec3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53 = (uv_40 * _DetailScale);
  highp vec2 uvCont_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_54);
  tmpvar_56.zw = dFdy(uvCont_54);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_DetailTex, tmpvar_53, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = ((_Color * tmpvar_38) * mix (tmpvar_58, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.y + (-t10_6.y);
    t0.x = t21 * t16_0 + t10_6.y;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.y + (-t10_6.y);
    t7.x = t21 * t16_7 + t10_6.y;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.y + (-t10_3.y);
    t7.x = t21 * t16_7 + t10_3.y;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, vec4(
    float((s_7 >= 0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, vec4(float((s_7 >= 0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, vec4(float((s_7 >= 0.0))))
  , vec4(zxlerp_9)), vec4(nylerp_8)) * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  highp float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, zxlerp_43);
  s_41 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, s_41, nylerp_42));
  s_41 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, 1.0);
  tmpvar_49.y = -(s_41);
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = s_41;
  mediump vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = -(s_41);
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_39.yxz), mix ((tmpvar_49 * tmpvar_39.xzy), (tmpvar_50 * tmpvar_39.zxy), vec3(zxlerp_43)), vec3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53 = (uv_40 * _DetailScale);
  highp vec2 uvCont_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_54);
  tmpvar_56.zw = dFdy(uvCont_54);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_DetailTex, tmpvar_53, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = ((_Color * tmpvar_38) * mix (tmpvar_58, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.z + (-t10_6.z);
    t0.x = t21 * t16_0 + t10_6.z;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.z + (-t10_6.z);
    t7.x = t21 * t16_7 + t10_6.z;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.z + (-t10_3.z);
    t7.x = t21 * t16_7 + t10_3.z;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedpfpdkjdlhmgkjgdcppkhdpmpbhifemplabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabeaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaabfaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabeaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
bfaaaaaaakiacaaaaaaaaaaabfaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabeaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec2 uv_5;
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  uv_5 = tmpvar_21;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, uv_5, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, vec4(
    float((s_7 >= 0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, vec4(float((s_7 >= 0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, vec4(float((s_7 >= 0.0))))
  , vec4(zxlerp_9)), vec4(nylerp_8)) * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  highp float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, zxlerp_43);
  s_41 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, s_41, nylerp_42));
  s_41 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, 1.0);
  tmpvar_49.y = -(s_41);
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = s_41;
  mediump vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = -(s_41);
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_39.yxz), mix ((tmpvar_49 * tmpvar_39.xzy), (tmpvar_50 * tmpvar_39.zxy), vec3(zxlerp_43)), vec3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53 = (uv_40 * _DetailScale);
  highp vec2 uvCont_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_54);
  tmpvar_56.zw = dFdy(uvCont_54);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_DetailTex, tmpvar_53, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = ((_Color * tmpvar_38) * mix (tmpvar_58, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.w + (-t10_6.w);
    t0.x = t21 * t16_0 + t10_6.w;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.w + (-t10_6.w);
    t7.x = t21 * t16_7 + t10_6.w;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.w + (-t10_3.w);
    t7.x = t21 * t16_7 + t10_3.w;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD5);
  vec2 uv_11;
  vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_10);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, mix (tmpvar_10.x, tmpvar_10.z, tmpvar_13), tmpvar_14));
  vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, 1.0);
  tmpvar_16.y = -(tmpvar_15);
  vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, 1.0);
  tmpvar_17.y = tmpvar_15;
  vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = -(tmpvar_15);
  vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_10.yxz), mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(tmpvar_13)), vec3(tmpvar_14));
  uv_11.x = (((0.5 * tmpvar_19.y) / abs(tmpvar_19.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_19.z) / abs(tmpvar_19.x)) + 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_11 * _DetailScale);
  vec2 uvCont_21;
  vec2 tmpvar_22;
  tmpvar_22 = abs((tmpvar_20 - (0.5 * _DetailScale)));
  uvCont_21.x = max (tmpvar_22.x, tmpvar_22.y);
  uvCont_21.y = min (tmpvar_22.x, tmpvar_22.y);
  vec4 tmpvar_23;
  tmpvar_23.xy = dFdx(uvCont_21);
  tmpvar_23.zw = dFdy(uvCont_21);
  vec3 tmpvar_24;
  tmpvar_24 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_25;
  tmpvar_25 = ((_Color * texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw)) * mix (texture2DGradARB (_DetailTex, tmpvar_20, tmpvar_23.xy, tmpvar_23.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_24, tmpvar_24)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_25.w;
  color_1.xyz = clamp ((tmpvar_25.xyz * (1.0 - tmpvar_25.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_25.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_16;
  mediump float s_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_15);
  highp float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  zxlerp_19 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  nylerp_18 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = mix (tmpvar_15.x, tmpvar_15.z, zxlerp_19);
  s_17 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_15.y, s_17, nylerp_18));
  s_17 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(s_17);
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = s_17;
  mediump vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(s_17);
  highp vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_15.yxz), mix ((tmpvar_25 * tmpvar_15.xzy), (tmpvar_26 * tmpvar_15.zxy), vec3(zxlerp_19)), vec3(nylerp_18));
  uv_16.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_16.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  highp vec2 tmpvar_29;
  tmpvar_29 = (uv_16 * _DetailScale);
  highp vec2 uvCont_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  highp vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  highp vec3 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_35, tmpvar_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_34, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  color_2 = tmpvar_38;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t10;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_0 = t10_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t10 = vs_TEXCOORD2 + 5.0;
    t10 = t10 + (-_PlanetRadius);
    t10 = t10 * 0.200000003;
    t10 = clamp(t10, 0.0, 1.0);
    t3.x = t10 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0 = t10_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 v_15;
  v_15 = (tmpvar_14 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_18;
  mediump float s_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  highp float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, zxlerp_21);
  s_19 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, s_19, nylerp_20));
  s_19 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = -(s_19);
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, 1.0);
  tmpvar_28.y = s_19;
  mediump vec3 tmpvar_29;
  tmpvar_29.xy = vec2(1.0, 1.0);
  tmpvar_29.z = -(s_19);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_29 * tmpvar_17.yxz), mix ((tmpvar_27 * tmpvar_17.xzy), (tmpvar_28 * tmpvar_17.zxy), vec3(zxlerp_21)), vec3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31 = (uv_18 * _DetailScale);
  highp vec2 uvCont_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  highp vec4 tmpvar_34;
  tmpvar_34.xy = dFdx(uvCont_32);
  tmpvar_34.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, tmpvar_31, tmpvar_34.xy, tmpvar_34.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_36, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_41;
  tmpvar_41 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t10;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).x;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t10 = vs_TEXCOORD2 + 5.0;
    t10 = t10 + (-_PlanetRadius);
    t10 = t10 * 0.200000003;
    t10 = clamp(t10, 0.0, 1.0);
    t3.x = t10 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).yzwx;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 v_15;
  v_15 = (tmpvar_14 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_18;
  mediump float s_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  highp float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, zxlerp_21);
  s_19 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, s_19, nylerp_20));
  s_19 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = -(s_19);
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, 1.0);
  tmpvar_28.y = s_19;
  mediump vec3 tmpvar_29;
  tmpvar_29.xy = vec2(1.0, 1.0);
  tmpvar_29.z = -(s_19);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_29 * tmpvar_17.yxz), mix ((tmpvar_27 * tmpvar_17.xzy), (tmpvar_28 * tmpvar_17.zxy), vec3(zxlerp_21)), vec3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31 = (uv_18 * _DetailScale);
  highp vec2 uvCont_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  highp vec4 tmpvar_34;
  tmpvar_34.xy = dFdx(uvCont_32);
  tmpvar_34.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, tmpvar_31, tmpvar_34.xy, tmpvar_34.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_36, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_41;
  tmpvar_41 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t10;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).y;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t10 = vs_TEXCOORD2 + 5.0;
    t10 = t10 + (-_PlanetRadius);
    t10 = t10 * 0.200000003;
    t10 = clamp(t10, 0.0, 1.0);
    t3.x = t10 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).xzwy;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 v_15;
  v_15 = (tmpvar_14 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_18;
  mediump float s_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  highp float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, zxlerp_21);
  s_19 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, s_19, nylerp_20));
  s_19 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = -(s_19);
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, 1.0);
  tmpvar_28.y = s_19;
  mediump vec3 tmpvar_29;
  tmpvar_29.xy = vec2(1.0, 1.0);
  tmpvar_29.z = -(s_19);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_29 * tmpvar_17.yxz), mix ((tmpvar_27 * tmpvar_17.xzy), (tmpvar_28 * tmpvar_17.zxy), vec3(zxlerp_21)), vec3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31 = (uv_18 * _DetailScale);
  highp vec2 uvCont_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  highp vec4 tmpvar_34;
  tmpvar_34.xy = dFdx(uvCont_32);
  tmpvar_34.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, tmpvar_31, tmpvar_34.xy, tmpvar_34.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_36, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_41;
  tmpvar_41 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t10;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).z;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t10 = vs_TEXCOORD2 + 5.0;
    t10 = t10 + (-_PlanetRadius);
    t10 = t10 * 0.200000003;
    t10 = clamp(t10, 0.0, 1.0);
    t3.x = t10 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).xywz;
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD5);
  vec2 uv_13;
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_12);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_12.y, mix (tmpvar_12.x, tmpvar_12.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, 1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = -(tmpvar_17);
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_12.yxz), mix ((tmpvar_18 * tmpvar_12.xzy), (tmpvar_19 * tmpvar_12.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_13.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_13.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_13 * _DetailScale);
  vec2 uvCont_23;
  vec2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_27;
  tmpvar_27 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, tmpvar_22, tmpvar_25.xy, tmpvar_25.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_26, tmpvar_26)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_27.w;
  color_1.xyz = clamp ((tmpvar_27.xyz * (1.0 - tmpvar_27.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_27.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 v_15;
  v_15 = (tmpvar_14 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_18;
  mediump float s_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  highp float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, zxlerp_21);
  s_19 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, s_19, nylerp_20));
  s_19 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, 1.0);
  tmpvar_27.y = -(s_19);
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, 1.0);
  tmpvar_28.y = s_19;
  mediump vec3 tmpvar_29;
  tmpvar_29.xy = vec2(1.0, 1.0);
  tmpvar_29.z = -(s_19);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_29 * tmpvar_17.yxz), mix ((tmpvar_27 * tmpvar_17.xzy), (tmpvar_28 * tmpvar_17.zxy), vec3(zxlerp_21)), vec3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31 = (uv_18 * _DetailScale);
  highp vec2 uvCont_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  highp vec4 tmpvar_34;
  tmpvar_34.xy = dFdx(uvCont_32);
  tmpvar_34.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, tmpvar_31, tmpvar_34.xy, tmpvar_34.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_36, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_41;
  tmpvar_41 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp float t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t10;
mediump vec3 t16_10;
highp float t14;
highp vec2 t15;
bool tb15;
highp int ti16;
highp float t21;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t21 = max(abs(t0.y), abs(t0.x));
    t21 = float(1.0) / t21;
    t1.x = min(abs(t0.y), abs(t0.x));
    t21 = t21 * t1.x;
    t1.x = t21 * t21;
    t8.x = t1.x * 0.0208350997 + -0.0851330012;
    t8.x = t1.x * t8.x + 0.180141002;
    t8.x = t1.x * t8.x + -0.330299497;
    t1.x = t1.x * t8.x + 0.999866009;
    t8.x = t21 * t1.x;
    t8.x = t8.x * -2.0 + 1.57079637;
    tb15 = abs(t0.y)<abs(t0.x);
    t8.x = tb15 ? t8.x : float(0.0);
    t21 = t21 * t1.x + t8.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t21 = t21 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t21) : t21;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t21 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t21 = t21 * abs(t0.z) + -0.212114394;
    t21 = t21 * abs(t0.z) + 1.57072878;
    t14 = -abs(t0.z) + 1.0;
    t14 = sqrt(t14);
    t1.x = t14 * t21;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t14 = t21 * t14 + t1.x;
    t2.y = t14 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy).w;
    t16_0.w = t10_0 * _Color.w;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_4 = float(ti1);
    t3.y = t8.x * t16_4;
    t5.z = t8.z * (-t16_4);
    t3.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t3.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_0.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_10.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_10.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t10 = vs_TEXCOORD2 + 5.0;
    t10 = t10 + (-_PlanetRadius);
    t10 = t10 * 0.200000003;
    t10 = clamp(t10, 0.0, 1.0);
    t3.x = t10 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bvec2 tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t7;
vec3 t8;
bool tb8;
float t12;
vec2 t13;
bool tb13;
int ti14;
float t18;
float t19;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t18 = max(abs(t0.y), abs(t0.x));
    t18 = float(1.0) / t18;
    t1.x = min(abs(t0.y), abs(t0.x));
    t18 = t18 * t1.x;
    t1.x = t18 * t18;
    t7.x = t1.x * 0.0208350997 + -0.0851330012;
    t7.x = t1.x * t7.x + 0.180141002;
    t7.x = t1.x * t7.x + -0.330299497;
    t1.x = t1.x * t7.x + 0.999866009;
    t7.x = t18 * t1.x;
    t7.x = t7.x * -2.0 + 1.57079637;
    tb13 = abs(t0.y)<abs(t0.x);
    t7.x = tb13 ? t7.x : float(0.0);
    t18 = t18 * t1.x + t7.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t18 = t18 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t18) : t18;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t18 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t18 = t18 * abs(t0.z) + -0.212114394;
    t18 = t18 * abs(t0.z) + 1.57072878;
    t12 = -abs(t0.z) + 1.0;
    t12 = sqrt(t12);
    t1.x = t12 * t18;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t12 = t18 * t12 + t1.x;
    t2.y = t12 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0.x = 1.0;
    t0 = t0.xxxw * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD5);
  vec2 uv_3;
  vec3 tmpvar_4;
  tmpvar_4 = abs(tmpvar_2);
  float tmpvar_5;
  tmpvar_5 = float((tmpvar_4.z >= tmpvar_4.x));
  float tmpvar_6;
  tmpvar_6 = float((max (tmpvar_4.x, tmpvar_4.z) >= tmpvar_4.y));
  float tmpvar_7;
  tmpvar_7 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_5), tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, 1.0);
  tmpvar_8.y = -(tmpvar_7);
  vec3 tmpvar_9;
  tmpvar_9.xz = vec2(1.0, 1.0);
  tmpvar_9.y = tmpvar_7;
  vec3 tmpvar_10;
  tmpvar_10.xy = vec2(1.0, 1.0);
  tmpvar_10.z = -(tmpvar_7);
  vec3 tmpvar_11;
  tmpvar_11 = mix ((tmpvar_10 * tmpvar_2.yxz), mix ((tmpvar_8 * tmpvar_2.xzy), (tmpvar_9 * tmpvar_2.zxy), vec3(tmpvar_5)), vec3(tmpvar_6));
  uv_3.x = (((0.5 * tmpvar_11.y) / abs(tmpvar_11.x)) + 0.5);
  uv_3.y = (((0.5 * tmpvar_11.z) / abs(tmpvar_11.x)) + 0.5);
  vec2 tmpvar_12;
  tmpvar_12 = (uv_3 * _DetailScale);
  vec2 uvCont_13;
  vec2 tmpvar_14;
  tmpvar_14 = abs((tmpvar_12 - (0.5 * _DetailScale)));
  uvCont_13.x = max (tmpvar_14.x, tmpvar_14.y);
  uvCont_13.y = min (tmpvar_14.x, tmpvar_14.y);
  vec4 tmpvar_15;
  tmpvar_15.xy = dFdx(uvCont_13);
  tmpvar_15.zw = dFdy(uvCont_13);
  vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_17;
  tmpvar_17 = ((_Color * textureCube (cube_MainTex, normalize(xlv_TEXCOORD4))) * mix (texture2DGradARB (_DetailTex, tmpvar_12, tmpvar_15.xy, tmpvar_15.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_16, tmpvar_16)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_17.w;
  color_1.xyz = clamp ((tmpvar_17.xyz * (1.0 - tmpvar_17.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_17.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_10;
  mediump float s_11;
  mediump float nylerp_12;
  mediump float zxlerp_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_9);
  highp float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  zxlerp_13 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  nylerp_12 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = mix (tmpvar_9.x, tmpvar_9.z, zxlerp_13);
  s_11 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = sign(mix (tmpvar_9.y, s_11, nylerp_12));
  s_11 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, 1.0);
  tmpvar_19.y = -(s_11);
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, 1.0);
  tmpvar_20.y = s_11;
  mediump vec3 tmpvar_21;
  tmpvar_21.xy = vec2(1.0, 1.0);
  tmpvar_21.z = -(s_11);
  highp vec3 tmpvar_22;
  tmpvar_22 = mix ((tmpvar_21 * tmpvar_9.yxz), mix ((tmpvar_19 * tmpvar_9.xzy), (tmpvar_20 * tmpvar_9.zxy), vec3(zxlerp_13)), vec3(nylerp_12));
  uv_10.x = (((0.5 * tmpvar_22.y) / abs(tmpvar_22.x)) + 0.5);
  uv_10.y = (((0.5 * tmpvar_22.z) / abs(tmpvar_22.x)) + 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23 = (uv_10 * _DetailScale);
  highp vec2 uvCont_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = abs((tmpvar_23 - (0.5 * _DetailScale)));
  uvCont_24.x = max (tmpvar_25.x, tmpvar_25.y);
  uvCont_24.y = min (tmpvar_25.x, tmpvar_25.y);
  highp vec4 tmpvar_26;
  tmpvar_26.xy = dFdx(uvCont_24);
  tmpvar_26.zw = dFdy(uvCont_24);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_DetailTex, tmpvar_23, tmpvar_26.xy, tmpvar_26.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  highp vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_29, tmpvar_29)
  )), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_8) * mix (tmpvar_28, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_30)));
  color_2 = tmpvar_32;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_33;
  tmpvar_33 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
highp float t9;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t3.xyz);
    t16_1 = t10_1 * _Color;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t9 = vs_TEXCOORD2 + 5.0;
    t9 = t9 + (-_PlanetRadius);
    t9 = t9 * 0.200000003;
    t9 = clamp(t9, 0.0, 1.0);
    t3.x = t9 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1 = t10_1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec4 v_9;
  v_9 = (tmpvar_8 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_12;
  mediump float s_13;
  mediump float nylerp_14;
  mediump float zxlerp_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_15);
  s_13 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, s_13, nylerp_14));
  s_13 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(s_13);
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = s_13;
  mediump vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(s_13);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_11.yxz), mix ((tmpvar_21 * tmpvar_11.xzy), (tmpvar_22 * tmpvar_11.zxy), vec3(zxlerp_15)), vec3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  highp vec2 tmpvar_25;
  tmpvar_25 = (uv_12 * _DetailScale);
  highp vec2 uvCont_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  highp vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_10) * mix (tmpvar_30, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_35;
  tmpvar_35 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
highp float t9;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).x;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t9 = vs_TEXCOORD2 + 5.0;
    t9 = t9 + (-_PlanetRadius);
    t9 = t9 * 0.200000003;
    t9 = clamp(t9, 0.0, 1.0);
    t3.x = t9 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).yzwx;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec4 v_9;
  v_9 = (tmpvar_8 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_12;
  mediump float s_13;
  mediump float nylerp_14;
  mediump float zxlerp_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_15);
  s_13 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, s_13, nylerp_14));
  s_13 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(s_13);
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = s_13;
  mediump vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(s_13);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_11.yxz), mix ((tmpvar_21 * tmpvar_11.xzy), (tmpvar_22 * tmpvar_11.zxy), vec3(zxlerp_15)), vec3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  highp vec2 tmpvar_25;
  tmpvar_25 = (uv_12 * _DetailScale);
  highp vec2 uvCont_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  highp vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_10) * mix (tmpvar_30, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_35;
  tmpvar_35 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
highp float t9;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).y;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t9 = vs_TEXCOORD2 + 5.0;
    t9 = t9 + (-_PlanetRadius);
    t9 = t9 * 0.200000003;
    t9 = clamp(t9, 0.0, 1.0);
    t3.x = t9 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).xzwy;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec4 v_9;
  v_9 = (tmpvar_8 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_12;
  mediump float s_13;
  mediump float nylerp_14;
  mediump float zxlerp_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_15);
  s_13 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, s_13, nylerp_14));
  s_13 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(s_13);
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = s_13;
  mediump vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(s_13);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_11.yxz), mix ((tmpvar_21 * tmpvar_11.xzy), (tmpvar_22 * tmpvar_11.zxy), vec3(zxlerp_15)), vec3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  highp vec2 tmpvar_25;
  tmpvar_25 = (uv_12 * _DetailScale);
  highp vec2 uvCont_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  highp vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_10) * mix (tmpvar_30, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_35;
  tmpvar_35 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
highp float t9;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).z;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t9 = vs_TEXCOORD2 + 5.0;
    t9 = t9 + (-_PlanetRadius);
    t9 = t9 * 0.200000003;
    t9 = clamp(t9, 0.0, 1.0);
    t3.x = t9 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz).xywz;
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD5);
  vec2 uv_5;
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_4);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_4.y, mix (tmpvar_4.x, tmpvar_4.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, 1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, 1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = -(tmpvar_9);
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_4.yxz), mix ((tmpvar_10 * tmpvar_4.xzy), (tmpvar_11 * tmpvar_4.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_5.x = (((0.5 * tmpvar_13.y) / abs(tmpvar_13.x)) + 0.5);
  uv_5.y = (((0.5 * tmpvar_13.z) / abs(tmpvar_13.x)) + 0.5);
  vec2 tmpvar_14;
  tmpvar_14 = (uv_5 * _DetailScale);
  vec2 uvCont_15;
  vec2 tmpvar_16;
  tmpvar_16 = abs((tmpvar_14 - (0.5 * _DetailScale)));
  uvCont_15.x = max (tmpvar_16.x, tmpvar_16.y);
  uvCont_15.y = min (tmpvar_16.x, tmpvar_16.y);
  vec4 tmpvar_17;
  tmpvar_17.xy = dFdx(uvCont_15);
  tmpvar_17.zw = dFdy(uvCont_15);
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_19;
  tmpvar_19 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, tmpvar_14, tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_18, tmpvar_18)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_19.w;
  color_1.xyz = clamp ((tmpvar_19.xyz * (1.0 - tmpvar_19.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_19.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec4 v_9;
  v_9 = (tmpvar_8 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_12;
  mediump float s_13;
  mediump float nylerp_14;
  mediump float zxlerp_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_15);
  s_13 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, s_13, nylerp_14));
  s_13 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(s_13);
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = s_13;
  mediump vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(s_13);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_11.yxz), mix ((tmpvar_21 * tmpvar_11.xzy), (tmpvar_22 * tmpvar_11.zxy), vec3(zxlerp_15)), vec3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  highp vec2 tmpvar_25;
  tmpvar_25 = (uv_12 * _DetailScale);
  highp vec2 uvCont_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  highp vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_10) * mix (tmpvar_30, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_35;
  tmpvar_35 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
highp vec2 t1;
mediump vec4 t16_1;
bool tb1;
mediump vec4 t16_2;
highp vec3 t3;
lowp float t10_3;
bool tb3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp float t7;
bool tb7;
highp float t9;
mediump vec3 t16_9;
highp vec2 t12;
highp int ti13;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t6.xyz = t0.xxx * vs_TEXCOORD5.xyz;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t6.x);
    tb7 = abs(t6.z)>=abs(t6.x);
    t7 = tb7 ? 1.0 : float(0.0);
    t1.x = t7 * t1.x + t6.x;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t6.z), abs(t6.x));
    tb1 = t1.x>=abs(t6.y);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t6.y;
    ti13 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti13) + ti0;
    t16_2.x = float(ti0);
    t3.y = t6.x * t16_2.x;
    t4.z = t6.z * (-t16_2.x);
    t3.xz = t6.zy;
    t4.xy = t6.yx;
    t0.xyz = t3.xyz + (-t4.yzx);
    t0.xyz = vec3(t7) * t0.xyz + t4.yzx;
    t0.xyz = (-t4.xyz) + t0.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t6.xy = vec2(t0.y * float(0.5), t0.z * float(0.5));
    t0.xy = t6.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t12.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t12.y), abs(t12.x));
    t12.x = min(abs(t12.y), abs(t12.x));
    t3.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t3.y = dFdx(t12.x);
    t1.y = dFdy(t12.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t3.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_0 = t3.xxxx * t16_1 + t10_0;
    t3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t3.x = inversesqrt(t3.x);
    t3.xyz = t3.xxx * vs_TEXCOORD4.xyz;
    t10_3 = texture(cube_MainTex, t3.xyz).w;
    t16_1.w = t10_3 * _Color.w;
    t10_5.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_1.xyz = _Color.xyz;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_5.xyz = t10_5.xxx * t16_2.xyz;
    t10_5.xyz = clamp(t10_5.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_9.xyz = t10_5.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_9.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t9 = vs_TEXCOORD2 + 5.0;
    t9 = t9 + (-_PlanetRadius);
    t9 = t9 * 0.200000003;
    t9 = clamp(t9, 0.0, 1.0);
    t3.x = t9 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
vec4 t1;
mediump vec4 t16_1;
bool tb1;
vec3 t2;
vec3 t3;
vec3 t4;
vec3 t5;
vec3 t6;
bool tb6;
vec2 t10;
int ti11;
float t16;
void main()
{
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t0.x = inversesqrt(t0.x);
    t5.xyz = t0.xxx * vs_TEXCOORD5.zxy;
    t1.x = vs_TEXCOORD5.z * t0.x + (-t5.y);
    tb6 = abs(t5.x)>=abs(t5.y);
    t6.x = tb6 ? 1.0 : float(0.0);
    t1.x = t6.x * t1.x + t5.y;
    t0.x = (-vs_TEXCOORD5.y) * t0.x + t1.x;
    t1.x = max(abs(t5.x), abs(t5.y));
    tb1 = t1.x>=abs(t5.z);
    t1.x = tb1 ? 1.0 : float(0.0);
    t0.x = t1.x * t0.x + t5.z;
    ti11 = int((0.0<t0.x) ? 0xFFFFFFFFu : uint(0u));
    ti0 = int((t0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti0 = (-ti11) + ti0;
    t2.y = float(ti0);
    t3.z = (-t2.y);
    t3.xy = vec2(1.0, 1.0);
    t4.xyz = t5.zyx * t3.xyz;
    t2.xz = vec2(1.0, 1.0);
    t2.xyz = t2.xyz * t5.xyz + (-t4.yzx);
    t6.xyz = t6.xxx * t2.xyz + t4.yzx;
    t0.xyz = (-t3.xyz) * t5.zyx + t6.xyz;
    t0.xyz = t1.xxx * t0.xyz + t4.xyz;
    t5.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t5.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t10.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t10.y), abs(t10.x));
    t10.x = min(abs(t10.y), abs(t10.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t10.x);
    t1.y = dFdy(t10.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t1 = texture(cube_MainTex, t1.xyz);
    t1.x = 1.0;
    t1 = t1.xxxw * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_8 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_33;
  mediump float s_34;
  mediump float nylerp_35;
  mediump float zxlerp_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(tmpvar_32);
  highp float tmpvar_38;
  tmpvar_38 = float((tmpvar_37.z >= tmpvar_37.x));
  zxlerp_36 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = float((max (tmpvar_37.x, tmpvar_37.z) >= tmpvar_37.y));
  nylerp_35 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_32.x, tmpvar_32.z, zxlerp_36);
  s_34 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_32.y, s_34, nylerp_35));
  s_34 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, 1.0);
  tmpvar_42.y = -(s_34);
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, 1.0);
  tmpvar_43.y = s_34;
  mediump vec3 tmpvar_44;
  tmpvar_44.xy = vec2(1.0, 1.0);
  tmpvar_44.z = -(s_34);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_44 * tmpvar_32.yxz), mix ((tmpvar_42 * tmpvar_32.xzy), (tmpvar_43 * tmpvar_32.zxy), vec3(zxlerp_36)), vec3(nylerp_35));
  uv_33.x = (((0.5 * tmpvar_45.y) / abs(tmpvar_45.x)) + 0.5);
  uv_33.y = (((0.5 * tmpvar_45.z) / abs(tmpvar_45.x)) + 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46 = (uv_33 * _DetailScale);
  highp vec2 uvCont_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = abs((tmpvar_46 - (0.5 * _DetailScale)));
  uvCont_47.x = max (tmpvar_48.x, tmpvar_48.y);
  uvCont_47.y = min (tmpvar_48.x, tmpvar_48.y);
  highp vec4 tmpvar_49;
  tmpvar_49.xy = dFdx(uvCont_47);
  tmpvar_49.zw = dFdy(uvCont_47);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2DGradEXT (_DetailTex, tmpvar_46, tmpvar_49.xy, tmpvar_49.zw);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  highp vec3 tmpvar_52;
  tmpvar_52 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_52, tmpvar_52)
  )), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = ((_Color * tmpvar_31) * mix (tmpvar_51, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_53)));
  color_2 = tmpvar_55;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_57;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump float t16_6;
highp vec3 t7;
lowp vec3 t10_8;
mediump vec2 t16_9;
highp vec3 t10;
highp vec3 t11;
bool tb11;
highp float t13;
mediump vec3 t16_13;
bool tb13;
mediump float t16_18;
highp vec2 t20;
highp int ti20;
highp int ti22;
bool tb28;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t10.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t10.y);
    tb11 = abs(t10.z)>=abs(t10.y);
    t11.x = tb11 ? 1.0 : float(0.0);
    t2.x = t11.x * t2.x + t10.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t10.y) + abs(t10.z);
    t2.x = t11.x * t2.x + abs(t10.y);
    tb2 = t2.x>=abs(t10.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t10.x);
    ti20 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti20) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t10.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t10.zyx + (-t4.xyz);
    t4.xyz = t11.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t10.xyz + t4.xyz;
    t1.xyz = t10.xyz * t16_3.xxy;
    tb28 = t16_3.y>=0.0;
    t16_0.x = (tb28) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_9.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_9.xy = t16_9.xy / abs(t1.xx);
    t16_3.xy = t16_9.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_9.y), abs(t16_9.x));
    t1.y = min(abs(t16_9.y), abs(t16_9.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_18 = (-t16_0.x) + t16_0.z;
    t16_0.x = t11.x * t16_18 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_1.w = t2.x * t16_0.x + t16_0.y;
    t16_1.xyz = t16_0.www;
    t16_0 = t16_1 * _Color;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t11.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t11.x);
    tb13 = abs(t11.z)>=abs(t11.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t4.x = t13 * t4.x + t11.x;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t11.z), abs(t11.x));
    tb4 = t4.x>=abs(t11.y);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t11.y;
    ti22 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti22) + ti2;
    t16_6 = float(ti2);
    t5.y = t11.x * t16_6;
    t7.z = t11.z * (-t16_6);
    t5.xz = t11.zy;
    t7.xy = t11.yx;
    t2.xyz = t5.xyz + (-t7.yzx);
    t2.xyz = vec3(t13) * t2.xyz + t7.yzx;
    t2.xyz = (-t7.xyz) + t2.xyz;
    t2.xyz = t4.xxx * t2.xyz + t7.xyz;
    t11.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t2.xy = t11.xy / abs(t2.xx);
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = t2.xy * vec2(_DetailScale);
    t20.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t20.y), abs(t20.x));
    t20.x = min(abs(t20.y), abs(t20.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t20.x);
    t4.y = dFdy(t20.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_8.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_8.xyz = t10_8.xxx * t16_2.xyz;
    t10_8.xyz = clamp(t10_8.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_13.xyz = t10_8.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_13.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t13 = vs_TEXCOORD2 + 5.0;
    t13 = t13 + (-_PlanetRadius);
    t13 = t13 * 0.200000003;
    t13 = clamp(t13, 0.0, 1.0);
    t4.x = t13 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
mediump vec4 t16_4;
vec3 t5;
lowp vec4 t10_5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
float t12;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t1.w = t19 * t0.x + t0.y;
    t1.xyz = t0.www;
    t0 = t1 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_8 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  mediump vec4 v_32;
  v_32 = (tmpvar_31 * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_35;
  mediump float s_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  highp float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, zxlerp_38);
  s_36 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, s_36, nylerp_37));
  s_36 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = -(s_36);
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, 1.0);
  tmpvar_45.y = s_36;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = -(s_36);
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_34.yxz), mix ((tmpvar_44 * tmpvar_34.xzy), (tmpvar_45 * tmpvar_34.zxy), vec3(zxlerp_38)), vec3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48 = (uv_35 * _DetailScale);
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_51;
  tmpvar_51.xy = dFdx(uvCont_49);
  tmpvar_51.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_DetailTex, tmpvar_48, tmpvar_51.xy, tmpvar_51.zw);
  mediump vec4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  highp vec3 tmpvar_54;
  tmpvar_54 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = ((_Color * tmpvar_33) * mix (tmpvar_53, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_8 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  mediump vec4 v_32;
  v_32 = (tmpvar_31 * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_35;
  mediump float s_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  highp float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, zxlerp_38);
  s_36 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, s_36, nylerp_37));
  s_36 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = -(s_36);
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, 1.0);
  tmpvar_45.y = s_36;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = -(s_36);
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_34.yxz), mix ((tmpvar_44 * tmpvar_34.xzy), (tmpvar_45 * tmpvar_34.zxy), vec3(zxlerp_38)), vec3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48 = (uv_35 * _DetailScale);
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_51;
  tmpvar_51.xy = dFdx(uvCont_49);
  tmpvar_51.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_DetailTex, tmpvar_48, tmpvar_51.xy, tmpvar_51.zw);
  mediump vec4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  highp vec3 tmpvar_54;
  tmpvar_54 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = ((_Color * tmpvar_33) * mix (tmpvar_53, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_8 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  mediump vec4 v_32;
  v_32 = (tmpvar_31 * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_35;
  mediump float s_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  highp float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, zxlerp_38);
  s_36 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, s_36, nylerp_37));
  s_36 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = -(s_36);
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, 1.0);
  tmpvar_45.y = s_36;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = -(s_36);
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_34.yxz), mix ((tmpvar_44 * tmpvar_34.xzy), (tmpvar_45 * tmpvar_34.zxy), vec3(zxlerp_38)), vec3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48 = (uv_35 * _DetailScale);
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_51;
  tmpvar_51.xy = dFdx(uvCont_49);
  tmpvar_51.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_DetailTex, tmpvar_48, tmpvar_51.xy, tmpvar_51.zw);
  mediump vec4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  highp vec3 tmpvar_54;
  tmpvar_54 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = ((_Color * tmpvar_33) * mix (tmpvar_53, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp vec3 t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9.x * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t2.xy = dFdx(t1.xy);
    t4.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t2.xyxx).xy, vec4(t4.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_0.w = t16_0.x * t16_7.x + t10_8;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = t9.xxx * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
vec3 t4;
lowp vec4 t10_4;
vec3 t5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t2.xy = dFdx(t0.zx);
    t3.xy = dFdy(t0.zx);
    t10_4 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t10_1 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t2.xyxx).xy, vec4(t3.xyxx).xy);
    t16_0 = (-t10_1.w) + t10_4.w;
    t0.w = t18 * t16_0 + t10_1.w;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((mix (tmpvar_3.x, tmpvar_3.z, tmpvar_4) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (-(tmpvar_2.y), mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  vec2 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, mix (tmpvar_19.x, tmpvar_19.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, 1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, 1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = -(tmpvar_24);
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_19.yxz), mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_20.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_20.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  vec2 tmpvar_29;
  tmpvar_29 = (uv_20 * _DetailScale);
  vec2 uvCont_30;
  vec2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  vec4 tmpvar_32;
  tmpvar_32.xy = dFdx(uvCont_30);
  tmpvar_32.zw = dFdy(uvCont_30);
  vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, tmpvar_29, tmpvar_32.xy, tmpvar_32.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_33, tmpvar_33)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_34.w;
  color_1.xyz = clamp ((tmpvar_34.xyz * (1.0 - tmpvar_34.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_34.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_8 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  mediump vec4 v_32;
  v_32 = (tmpvar_31 * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_35;
  mediump float s_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  highp float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, zxlerp_38);
  s_36 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, s_36, nylerp_37));
  s_36 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, 1.0);
  tmpvar_44.y = -(s_36);
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, 1.0);
  tmpvar_45.y = s_36;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = -(s_36);
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_34.yxz), mix ((tmpvar_44 * tmpvar_34.xzy), (tmpvar_45 * tmpvar_34.zxy), vec3(zxlerp_38)), vec3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48 = (uv_35 * _DetailScale);
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_51;
  tmpvar_51.xy = dFdx(uvCont_49);
  tmpvar_51.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_DetailTex, tmpvar_48, tmpvar_51.xy, tmpvar_51.zw);
  mediump vec4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  highp vec3 tmpvar_54;
  tmpvar_54 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = ((_Color * tmpvar_33) * mix (tmpvar_53, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
lowp vec3 t10_4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp float t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = vs_TEXCOORD4.y * t1.x + t2.x;
    t2.x = -abs(t8.y) + abs(t8.z);
    t2.x = t9 * t2.x + abs(t8.y);
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + (-t8.x);
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.xyz = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t10_4.xyz = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).xyz;
    t16_7.xyz = t10_1.xyz + (-t10_4.xyz);
    t16_0.xyz = t16_0.xxx * t16_7.xyz + t10_4.xyz;
    t16_14 = (-t16_0.x) + t16_0.z;
    t16_0.x = t9 * t16_14 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.w = t2.x * t16_0.x + t16_0.y;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump vec3 t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
vec2 t6;
vec3 t7;
vec3 t8;
int ti8;
bool tb8;
float t12;
vec2 t13;
int ti14;
float t18;
int ti18;
bool tb18;
float t19;
bool tb19;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = vs_TEXCOORD4.y * t18 + t19;
    t19 = -abs(t1.y) + abs(t1.z);
    t19 = t2.x * t19 + abs(t1.y);
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + (-t1.x);
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0.xyz = (-t10_3.xyz) + t10_5.xyz;
    t0.xyz = vec3(t18) * t16_0.xyz + t10_3.xyz;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t0.w = t19 * t0.x + t0.y;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t7.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t7.y);
    tb8 = abs(t7.x)>=abs(t7.y);
    t8.x = tb8 ? 1.0 : float(0.0);
    t2.x = t8.x * t2.x + t7.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t7.x), abs(t7.y));
    tb2 = t2.x>=abs(t7.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t7.z;
    ti14 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti14) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t7.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t7.xyz + (-t5.yzx);
    t8.xyz = t8.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t7.zyx + t8.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD5);
  vec2 uv_16;
  vec3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_15);
  float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_18), tmpvar_19));
  vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, 1.0);
  tmpvar_21.y = -(tmpvar_20);
  vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, 1.0);
  tmpvar_22.y = tmpvar_20;
  vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = -(tmpvar_20);
  vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_15.yxz), mix ((tmpvar_21 * tmpvar_15.xzy), (tmpvar_22 * tmpvar_15.zxy), vec3(tmpvar_18)), vec3(tmpvar_19));
  uv_16.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_16.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  vec2 tmpvar_25;
  tmpvar_25 = (uv_16 * _DetailScale);
  vec2 uvCont_26;
  vec2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_30;
  tmpvar_30 = ((_Color * mix (
    mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), vec4(tmpvar_4))
  , vec4(tmpvar_5))) * mix (texture2DGradARB (_DetailTex, tmpvar_25, tmpvar_28.xy, tmpvar_28.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_29, tmpvar_29)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_30.w;
  color_1.xyz = clamp ((tmpvar_30.xyz * (1.0 - tmpvar_30.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_30.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_39;
  mediump float s_40;
  mediump float nylerp_41;
  mediump float zxlerp_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = abs(tmpvar_38);
  highp float tmpvar_44;
  tmpvar_44 = float((tmpvar_43.z >= tmpvar_43.x));
  zxlerp_42 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = float((max (tmpvar_43.x, tmpvar_43.z) >= tmpvar_43.y));
  nylerp_41 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = mix (tmpvar_38.x, tmpvar_38.z, zxlerp_42);
  s_40 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = sign(mix (tmpvar_38.y, s_40, nylerp_41));
  s_40 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, 1.0);
  tmpvar_48.y = -(s_40);
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, 1.0);
  tmpvar_49.y = s_40;
  mediump vec3 tmpvar_50;
  tmpvar_50.xy = vec2(1.0, 1.0);
  tmpvar_50.z = -(s_40);
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_50 * tmpvar_38.yxz), mix ((tmpvar_48 * tmpvar_38.xzy), (tmpvar_49 * tmpvar_38.zxy), vec3(zxlerp_42)), vec3(nylerp_41));
  uv_39.x = (((0.5 * tmpvar_51.y) / abs(tmpvar_51.x)) + 0.5);
  uv_39.y = (((0.5 * tmpvar_51.z) / abs(tmpvar_51.x)) + 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52 = (uv_39 * _DetailScale);
  highp vec2 uvCont_53;
  highp vec2 tmpvar_54;
  tmpvar_54 = abs((tmpvar_52 - (0.5 * _DetailScale)));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  highp vec4 tmpvar_55;
  tmpvar_55.xy = dFdx(uvCont_53);
  tmpvar_55.zw = dFdy(uvCont_53);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_DetailTex, tmpvar_52, tmpvar_55.xy, tmpvar_55.zw);
  mediump vec4 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_58, tmpvar_58)
  )), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = ((_Color * mix (
    mix (tmpvar_31, tmpvar_33, vec4(float((s_8 >= 0.0))))
  , 
    mix (mix (tmpvar_27, tmpvar_29, vec4(float((s_8 >= 0.0)))), mix (tmpvar_35, tmpvar_37, vec4(float((s_8 >= 0.0)))), vec4(zxlerp_10))
  , vec4(nylerp_9))) * mix (tmpvar_57, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_59)));
  color_2 = tmpvar_61;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_63;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump float t16_8;
highp vec3 t9;
lowp vec3 t10_10;
mediump vec2 t16_11;
highp vec3 t12;
highp vec3 t13;
bool tb13;
highp float t16;
mediump vec3 t16_16;
bool tb16;
highp vec2 t24;
highp int ti24;
highp int ti27;
bool tb34;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t12.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t12.y);
    tb13 = abs(t12.z)>=abs(t12.y);
    t13.x = tb13 ? 1.0 : float(0.0);
    t2.x = t13.x * t2.x + t12.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t12.z), abs(t12.y));
    tb2 = t2.x>=abs(t12.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t12.x;
    ti24 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti24) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t12.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t12.zyx + (-t4.xyz);
    t4.xyz = t13.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t12.xyz + t4.xyz;
    t1.xyz = t12.xyz * t16_3.xxy;
    tb34 = t16_3.y>=0.0;
    t16_0.x = (tb34) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_11.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_11.xy = t16_11.xy / abs(t1.xx);
    t16_3.xy = t16_11.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_11.y), abs(t16_11.x));
    t1.y = min(abs(t16_11.y), abs(t16_11.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t13.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0 = t16_0 * _Color;
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t13.xyz = t2.xxx * vs_TEXCOORD5.xyz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t13.x);
    tb16 = abs(t13.z)>=abs(t13.x);
    t16 = tb16 ? 1.0 : float(0.0);
    t5.x = t16 * t5.x + t13.x;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t13.z), abs(t13.x));
    tb5 = t5.x>=abs(t13.y);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t13.y;
    ti27 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti27) + ti2;
    t16_8 = float(ti2);
    t7.y = t13.x * t16_8;
    t9.z = t13.z * (-t16_8);
    t7.xz = t13.zy;
    t9.xy = t13.yx;
    t2.xyz = t7.xyz + (-t9.yzx);
    t2.xyz = vec3(t16) * t2.xyz + t9.yzx;
    t2.xyz = (-t9.xyz) + t2.xyz;
    t2.xyz = t5.xxx * t2.xyz + t9.xyz;
    t13.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t2.xy = t13.xy / abs(t2.xx);
    t2.xy = t2.xy + vec2(0.5, 0.5);
    t2.xy = t2.xy * vec2(_DetailScale);
    t24.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t24.y), abs(t24.x));
    t24.x = min(abs(t24.y), abs(t24.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t24.x);
    t5.y = dFdy(t24.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_10.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_10.xyz = t10_10.xxx * t16_2.xyz;
    t10_10.xyz = clamp(t10_10.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_16.xyz = t10_10.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_16.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t16 = vs_TEXCOORD2 + 5.0;
    t16 = t16 + (-_PlanetRadius);
    t16 = t16 * 0.200000003;
    t16 = clamp(t16, 0.0, 1.0);
    t5.x = t16 * t5.x;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec3 t9;
vec3 t10;
int ti10;
bool tb10;
vec2 t17;
int ti18;
float t24;
int ti24;
bool tb24;
float t25;
bool tb25;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.x)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.x), abs(t9.y));
    tb2 = t2.x>=abs(t9.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.z;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t9.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t9.xyz + (-t5.yzx);
    t10.xyz = t10.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t9.zyx + t10.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t9.x = vs_TEXCOORD2 + 5.0;
    t9.x = t9.x + (-_PlanetRadius);
    t9.x = t9.x * 0.200000003;
    t9.x = clamp(t9.x, 0.0, 1.0);
    t1.x = t9.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(1.0, 0.0, 0.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, vec4(
    float((s_8 >= 0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, vec4(float((s_8 >= 0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, vec4(float((s_8 >= 0.0))))
  , vec4(zxlerp_10)), vec4(nylerp_9)) * vec4(1.0, 0.0, 0.0, 0.0));
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_41;
  mediump float s_42;
  mediump float nylerp_43;
  mediump float zxlerp_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, zxlerp_44);
  s_42 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, s_42, nylerp_43));
  s_42 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = -(s_42);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, 1.0);
  tmpvar_51.y = s_42;
  mediump vec3 tmpvar_52;
  tmpvar_52.xy = vec2(1.0, 1.0);
  tmpvar_52.z = -(s_42);
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_52 * tmpvar_40.yxz), mix ((tmpvar_50 * tmpvar_40.xzy), (tmpvar_51 * tmpvar_40.zxy), vec3(zxlerp_44)), vec3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54 = (uv_41 * _DetailScale);
  highp vec2 uvCont_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  highp vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_DetailTex, tmpvar_54, tmpvar_57.xy, tmpvar_57.zw);
  mediump vec4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = ((_Color * tmpvar_39) * mix (tmpvar_59, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).x;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.x + (-t10_6.x);
    t0.x = t21 * t16_0 + t10_6.x;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.x + (-t10_6.x);
    t7.x = t21 * t16_7 + t10_6.x;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.x + (-t10_3.x);
    t7.x = t21 * t16_7 + t10_3.x;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t8.x = vs_TEXCOORD2 + 5.0;
    t8.x = t8.x + (-_PlanetRadius);
    t8.x = t8.x * 0.200000003;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t1.x = t8.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 1.0, 0.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, vec4(
    float((s_8 >= 0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, vec4(float((s_8 >= 0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, vec4(float((s_8 >= 0.0))))
  , vec4(zxlerp_10)), vec4(nylerp_9)) * vec4(0.0, 1.0, 0.0, 0.0));
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_41;
  mediump float s_42;
  mediump float nylerp_43;
  mediump float zxlerp_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, zxlerp_44);
  s_42 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, s_42, nylerp_43));
  s_42 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = -(s_42);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, 1.0);
  tmpvar_51.y = s_42;
  mediump vec3 tmpvar_52;
  tmpvar_52.xy = vec2(1.0, 1.0);
  tmpvar_52.z = -(s_42);
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_52 * tmpvar_40.yxz), mix ((tmpvar_50 * tmpvar_40.xzy), (tmpvar_51 * tmpvar_40.zxy), vec3(zxlerp_44)), vec3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54 = (uv_41 * _DetailScale);
  highp vec2 uvCont_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  highp vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_DetailTex, tmpvar_54, tmpvar_57.xy, tmpvar_57.zw);
  mediump vec4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = ((_Color * tmpvar_39) * mix (tmpvar_59, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).y;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.y + (-t10_6.y);
    t0.x = t21 * t16_0 + t10_6.y;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.y + (-t10_6.y);
    t7.x = t21 * t16_7 + t10_6.y;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.y + (-t10_3.y);
    t7.x = t21 * t16_7 + t10_3.y;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t8.x = vs_TEXCOORD2 + 5.0;
    t8.x = t8.x + (-_PlanetRadius);
    t8.x = t8.x * 0.200000003;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t1.x = t8.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 0.0, 1.0, 0.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, vec4(
    float((s_8 >= 0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, vec4(float((s_8 >= 0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, vec4(float((s_8 >= 0.0))))
  , vec4(zxlerp_10)), vec4(nylerp_9)) * vec4(0.0, 0.0, 1.0, 0.0));
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_41;
  mediump float s_42;
  mediump float nylerp_43;
  mediump float zxlerp_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, zxlerp_44);
  s_42 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, s_42, nylerp_43));
  s_42 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = -(s_42);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, 1.0);
  tmpvar_51.y = s_42;
  mediump vec3 tmpvar_52;
  tmpvar_52.xy = vec2(1.0, 1.0);
  tmpvar_52.z = -(s_42);
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_52 * tmpvar_40.yxz), mix ((tmpvar_50 * tmpvar_40.xzy), (tmpvar_51 * tmpvar_40.zxy), vec3(zxlerp_44)), vec3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54 = (uv_41 * _DetailScale);
  highp vec2 uvCont_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  highp vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_DetailTex, tmpvar_54, tmpvar_57.xy, tmpvar_57.zw);
  mediump vec4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = ((_Color * tmpvar_39) * mix (tmpvar_59, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).z;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.z + (-t10_6.z);
    t0.x = t21 * t16_0 + t10_6.z;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.z + (-t10_6.z);
    t7.x = t21 * t16_7 + t10_6.z;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.z + (-t10_3.z);
    t7.x = t21 * t16_7 + t10_3.z;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t8.x = vs_TEXCOORD2 + 5.0;
    t8.x = t8.x + (-_PlanetRadius);
    t8.x = t8.x * 0.200000003;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t1.x = t8.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * vec4(0.0, 0.0, 0.0, 1.0));
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD5);
  vec2 uv_18;
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_17);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_17.y, mix (tmpvar_17.x, tmpvar_17.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, 1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, 1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = -(tmpvar_22);
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_17.yxz), mix ((tmpvar_23 * tmpvar_17.xzy), (tmpvar_24 * tmpvar_17.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_18.x = (((0.5 * tmpvar_26.y) / abs(tmpvar_26.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_26.z) / abs(tmpvar_26.x)) + 0.5);
  vec2 tmpvar_27;
  tmpvar_27 = (uv_18 * _DetailScale);
  vec2 uvCont_28;
  vec2 tmpvar_29;
  tmpvar_29 = abs((tmpvar_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_32;
  tmpvar_32 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, tmpvar_27, tmpvar_30.xy, tmpvar_30.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_31, tmpvar_31)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_32.w;
  color_1.xyz = clamp ((tmpvar_32.xyz * (1.0 - tmpvar_32.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_32.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 432
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 368 [_Projector]
Vector 320 [_SunDir]
Float 336 [_Radius]
Vector 352 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedgbjkmjnllddadnmhdkdppjcegbdckbfmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaablaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaabiaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabjaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaabkaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabgaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
beaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
beaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaabfaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaaakiacaaaaaaaaaaabfaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabeaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec2 uv_6;
  mediump vec3 detailCoords_7;
  mediump float s_8;
  mediump float nylerp_9;
  mediump float zxlerp_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, zxlerp_10);
  s_8 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, s_8, nylerp_9));
  s_8 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = -(s_8);
  mediump vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = s_8;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_17 * tmpvar_11.xzy), (tmpvar_18 * tmpvar_11.zxy), vec3(zxlerp_10));
  detailCoords_7 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = s_8;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_11.yxz), detailCoords_7, vec3(nylerp_9));
  detailCoords_7 = tmpvar_21;
  mediump vec2 tmpvar_22;
  tmpvar_22 = (((0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + 0.5);
  uv_6 = tmpvar_22;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, uv_6, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, vec4(
    float((s_8 >= 0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, vec4(float((s_8 >= 0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, vec4(float((s_8 >= 0.0))))
  , vec4(zxlerp_10)), vec4(nylerp_9)) * vec4(0.0, 0.0, 0.0, 1.0));
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_41;
  mediump float s_42;
  mediump float nylerp_43;
  mediump float zxlerp_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, zxlerp_44);
  s_42 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, s_42, nylerp_43));
  s_42 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, 1.0);
  tmpvar_50.y = -(s_42);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, 1.0);
  tmpvar_51.y = s_42;
  mediump vec3 tmpvar_52;
  tmpvar_52.xy = vec2(1.0, 1.0);
  tmpvar_52.z = -(s_42);
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_52 * tmpvar_40.yxz), mix ((tmpvar_50 * tmpvar_40.xzy), (tmpvar_51 * tmpvar_40.zxy), vec3(zxlerp_44)), vec3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54 = (uv_41 * _DetailScale);
  highp vec2 uvCont_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  highp vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_DetailTex, tmpvar_54, tmpvar_57.xy, tmpvar_57.zw);
  mediump vec4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = ((_Color * tmpvar_39) * mix (tmpvar_59, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
mediump vec2 t16_7;
highp vec3 t8;
lowp float t10_8;
highp float t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
mediump float t16_14;
highp vec2 t15;
highp int ti16;
bool tb22;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t4.xyz = vec3(t9) * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t8.xyz + t4.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    tb22 = t16_3.y>=0.0;
    t16_0.x = (tb22) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_7.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_7.xy = t16_7.xy / abs(t1.xx);
    t16_3.xy = t16_7.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_7.y), abs(t16_7.x));
    t1.y = min(abs(t16_7.y), abs(t16_7.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1.x = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_7.x = (-t10_8) + t10_1.x;
    t16_7.x = t16_0.x * t16_7.x + t10_8;
    t10_1.x = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_14 = (-t10_8) + t10_1.x;
    t16_14 = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_14) + t16_7.x;
    t16_7.x = t9 * t16_7.x + t16_14;
    t10_1.x = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t10_8 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy).w;
    t16_14 = (-t10_8) + t10_1.x;
    t16_0.x = t16_0.x * t16_14 + t10_8;
    t16_7.x = (-t16_0.x) + t16_7.x;
    t16_0.w = t2.x * t16_7.x + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.xyz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.x);
    tb9 = abs(t8.z)>=abs(t8.x);
    t9 = tb9 ? 1.0 : float(0.0);
    t2.x = t9 * t2.x + t8.x;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.x));
    tb2 = t2.x>=abs(t8.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.y;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.x = float(ti1);
    t4.y = t8.x * t16_3.x;
    t5.z = t8.z * (-t16_3.x);
    t4.xz = t8.zy;
    t5.xy = t8.yx;
    t1.xyz = t4.xyz + (-t5.yzx);
    t1.xyz = vec3(t9) * t1.xyz + t5.yzx;
    t1.xyz = (-t5.xyz) + t1.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_6.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
mediump float t16_0;
vec4 t1;
lowp vec4 t10_1;
int ti1;
bool tb1;
vec2 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
vec3 t4;
vec3 t5;
lowp vec4 t10_5;
lowp vec4 t10_6;
vec2 t7;
mediump float t16_7;
vec3 t8;
vec3 t9;
int ti9;
bool tb9;
vec2 t15;
int ti16;
float t21;
int ti21;
bool tb21;
float t22;
bool tb22;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t21 = inversesqrt(t21);
    t1.xyz = vec3(t21) * vs_TEXCOORD4.yxz;
    t22 = vs_TEXCOORD4.z * t21 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t22 = t2.x * t22 + t1.y;
    t21 = (-vs_TEXCOORD4.y) * t21 + t22;
    t22 = max(abs(t1.z), abs(t1.y));
    tb22 = t22>=abs(t1.x);
    t22 = tb22 ? 1.0 : float(0.0);
    t21 = t22 * t21 + t1.x;
    ti9 = int((0.0<t21) ? 0xFFFFFFFFu : uint(0u));
    ti21 = int((t21<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti21 = (-ti9) + ti21;
    t3.y = float(ti21);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t9.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t9.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb21 = t3.y>=0.0;
    t21 = tb21 ? 1.0 : float(0.0);
    t0.xyz = vec3(t22) * t0.xyz + t1.xyz;
    t7.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t7.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_0 = t10_5.w + (-t10_6.w);
    t0.x = t21 * t16_0 + t10_6.w;
    t10_5 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_5.w + (-t10_6.w);
    t7.x = t21 * t16_7 + t10_6.w;
    t0.x = (-t7.x) + t0.x;
    t0.x = t2.x * t0.x + t7.x;
    t10_2 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_7 = t10_2.w + (-t10_3.w);
    t7.x = t21 * t16_7 + t10_3.w;
    t0.x = (-t7.x) + t0.x;
    t0.w = t22 * t0.x + t7.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.zxy;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.x)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.x), abs(t8.y));
    tb2 = t2.x>=abs(t8.z);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.z;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t3.y = float(ti1);
    t4.z = (-t3.y);
    t4.xy = vec2(1.0, 1.0);
    t5.xyz = t8.zyx * t4.xyz;
    t3.xz = vec2(1.0, 1.0);
    t3.xyz = t3.xyz * t8.xyz + (-t5.yzx);
    t9.xyz = t9.xxx * t3.xyz + t5.yzx;
    t1.xyz = (-t4.xyz) * t8.zyx + t9.xyz;
    t1.xyz = t2.xxx * t1.xyz + t5.xyz;
    t8.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t8.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t22 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t22);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t8.x = vs_TEXCOORD2 + 5.0;
    t8.x = t8.x + (-_PlanetRadius);
    t8.x = t8.x * 0.200000003;
    t8.x = clamp(t8.x, 0.0, 1.0);
    t1.x = t8.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 96 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.w
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.w
mad r1.y, r1.z, c7.w, c7.w
mul r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecednjlklkpcnibhebiffdafhhdmohljebnkabaaaaaadaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpiamaaaaeaaaaaaadoadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  float3 tmpvar_14;
  tmpvar_14 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_15;
  half s_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_14);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  zxlerp_18 = half(tmpvar_20);
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  nylerp_17 = half(tmpvar_21);
  float tmpvar_22;
  tmpvar_22 = mix (tmpvar_14.x, tmpvar_14.z, (float)zxlerp_18);
  s_16 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = sign(mix (tmpvar_14.y, (float)s_16, (float)nylerp_17));
  s_16 = half(tmpvar_23);
  half3 tmpvar_24;
  tmpvar_24.xz = half2(float2(1.0, 1.0));
  tmpvar_24.y = -(s_16);
  half3 tmpvar_25;
  tmpvar_25.xz = half2(float2(1.0, 1.0));
  tmpvar_25.y = s_16;
  half3 tmpvar_26;
  tmpvar_26.xy = half2(float2(1.0, 1.0));
  tmpvar_26.z = -(s_16);
  float3 tmpvar_27;
  tmpvar_27 = mix (((float3)tmpvar_26 * tmpvar_14.yxz), mix (((float3)tmpvar_24 * tmpvar_14.xzy), ((float3)tmpvar_25 * tmpvar_14.zxy), (float3)half3(zxlerp_18)), (float3)half3(nylerp_17));
  uv_15.x = (((0.5 * tmpvar_27.y) / abs(tmpvar_27.x)) + 0.5);
  uv_15.y = (((0.5 * tmpvar_27.z) / abs(tmpvar_27.x)) + 0.5);
  float2 tmpvar_28;
  tmpvar_28 = (uv_15 * _mtl_u._DetailScale);
  float2 uvCont_29;
  float2 tmpvar_30;
  tmpvar_30 = abs((tmpvar_28 - (0.5 * _mtl_u._DetailScale)));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  float4 tmpvar_31;
  tmpvar_31.xy = dfdx(uvCont_29);
  tmpvar_31.zw = dfdy(uvCont_29);
  half4 tmpvar_32;
  tmpvar_32 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_28), gradient2d((float2)(tmpvar_31.xy), (float2)(tmpvar_31.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  float3 tmpvar_34;
  tmpvar_34 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_34, tmpvar_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_33, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  color_2 = tmpvar_37;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_38;
  tmpvar_38 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_39;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 97 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.x, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.w
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.w
mad r1.y, r1.z, c7.w, c7.w
mul r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedfaikddmoeabciloloicghgfmlplgkbgiabaaaaaaeeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcamanaaaaeaaaaaaaedadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaajghdbaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaai
pcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 v_14;
  v_14 = (tmpvar_13 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_15;
  tmpvar_15.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_17;
  half s_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, (float)zxlerp_20);
  s_18 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, (float)s_18, (float)nylerp_19));
  s_18 = half(tmpvar_25);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, 1.0));
  tmpvar_26.y = -(s_18);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = s_18;
  half3 tmpvar_28;
  tmpvar_28.xy = half2(float2(1.0, 1.0));
  tmpvar_28.z = -(s_18);
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_28 * tmpvar_16.yxz), mix (((float3)tmpvar_26 * tmpvar_16.xzy), ((float3)tmpvar_27 * tmpvar_16.zxy), (float3)half3(zxlerp_20)), (float3)half3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  float2 tmpvar_30;
  tmpvar_30 = (uv_17 * _mtl_u._DetailScale);
  float2 uvCont_31;
  float2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _mtl_u._DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_31);
  tmpvar_33.zw = dfdy(uvCont_31);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_30), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  float3 tmpvar_36;
  tmpvar_36 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_35, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_40;
  tmpvar_40 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 97 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.y, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.w
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.w
mad r1.y, r1.z, c7.w, c7.w
mul r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedmbhghencaedbknldlihgihemjdleegpkabaaaaaaeeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcamanaaaaeaaaaaaaedadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaighhbaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaai
pcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 v_14;
  v_14 = (tmpvar_13 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_15;
  tmpvar_15.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_17;
  half s_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, (float)zxlerp_20);
  s_18 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, (float)s_18, (float)nylerp_19));
  s_18 = half(tmpvar_25);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, 1.0));
  tmpvar_26.y = -(s_18);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = s_18;
  half3 tmpvar_28;
  tmpvar_28.xy = half2(float2(1.0, 1.0));
  tmpvar_28.z = -(s_18);
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_28 * tmpvar_16.yxz), mix (((float3)tmpvar_26 * tmpvar_16.xzy), ((float3)tmpvar_27 * tmpvar_16.zxy), (float3)half3(zxlerp_20)), (float3)half3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  float2 tmpvar_30;
  tmpvar_30 = (uv_17 * _mtl_u._DetailScale);
  float2 uvCont_31;
  float2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _mtl_u._DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_31);
  tmpvar_33.zw = dfdy(uvCont_31);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_30), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  float3 tmpvar_36;
  tmpvar_36 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_35, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_40;
  tmpvar_40 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 97 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.z, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.w
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.w
mad r1.y, r1.z, c7.w, c7.w
mul r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedjknincbhiinfebgphbomobflhhdfakcdabaaaaaaeeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcamanaaaaeaaaaaaaedadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghlbaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaai
pcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 v_14;
  v_14 = (tmpvar_13 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_15;
  tmpvar_15.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_17;
  half s_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, (float)zxlerp_20);
  s_18 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, (float)s_18, (float)nylerp_19));
  s_18 = half(tmpvar_25);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, 1.0));
  tmpvar_26.y = -(s_18);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = s_18;
  half3 tmpvar_28;
  tmpvar_28.xy = half2(float2(1.0, 1.0));
  tmpvar_28.z = -(s_18);
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_28 * tmpvar_16.yxz), mix (((float3)tmpvar_26 * tmpvar_16.xzy), ((float3)tmpvar_27 * tmpvar_16.zxy), (float3)half3(zxlerp_20)), (float3)half3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  float2 tmpvar_30;
  tmpvar_30 = (uv_17 * _mtl_u._DetailScale);
  float2 uvCont_31;
  float2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _mtl_u._DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_31);
  tmpvar_33.zw = dfdy(uvCont_31);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_30), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  float3 tmpvar_36;
  tmpvar_36 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_35, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_40;
  tmpvar_40 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 97 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.w, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.w
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.w
mad r1.y, r1.z, c7.w, c7.w
mul r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedhkcempgbmjofgfaokepllhgadiecpgdoabaaaaaaeeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcamanaaaaeaaaaaaaedadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaai
pcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 v_14;
  v_14 = (tmpvar_13 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_15;
  tmpvar_15.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_17;
  half s_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_16);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_20 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_19 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = mix (tmpvar_16.x, tmpvar_16.z, (float)zxlerp_20);
  s_18 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_16.y, (float)s_18, (float)nylerp_19));
  s_18 = half(tmpvar_25);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, 1.0));
  tmpvar_26.y = -(s_18);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = s_18;
  half3 tmpvar_28;
  tmpvar_28.xy = half2(float2(1.0, 1.0));
  tmpvar_28.z = -(s_18);
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_28 * tmpvar_16.yxz), mix (((float3)tmpvar_26 * tmpvar_16.xzy), ((float3)tmpvar_27 * tmpvar_16.zxy), (float3)half3(zxlerp_20)), (float3)half3(nylerp_19));
  uv_17.x = (((0.5 * tmpvar_29.y) / abs(tmpvar_29.x)) + 0.5);
  uv_17.y = (((0.5 * tmpvar_29.z) / abs(tmpvar_29.x)) + 0.5);
  float2 tmpvar_30;
  tmpvar_30 = (uv_17 * _mtl_u._DetailScale);
  float2 uvCont_31;
  float2 tmpvar_32;
  tmpvar_32 = abs((tmpvar_30 - (0.5 * _mtl_u._DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_31);
  tmpvar_33.zw = dfdy(uvCont_31);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_30), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  float3 tmpvar_36;
  tmpvar_36 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_35, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_40;
  tmpvar_40 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 55 math, 4 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 53 math, 1 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedgjgbibcmijakibneebjjchpfhepfccgpabaaaaaaeaajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaiaiaaaaeaaaaaaaacacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaabaaaaaa
ckbabaaaafaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaaj
ccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
aaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaaaaaaaaaadgaaaaagecaabaaa
adaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaaidcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaalganbaaa
aaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaaacaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaa
jgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaabaaaaaa
fgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaaaeaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaaaaaaaaaajgahbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaa
akaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaa
acaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
aaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaa
egiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab
"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_9;
  half s_10;
  half nylerp_11;
  half zxlerp_12;
  float3 tmpvar_13;
  tmpvar_13 = abs(tmpvar_8);
  float tmpvar_14;
  tmpvar_14 = float((tmpvar_13.z >= tmpvar_13.x));
  zxlerp_12 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = float((max (tmpvar_13.x, tmpvar_13.z) >= tmpvar_13.y));
  nylerp_11 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = mix (tmpvar_8.x, tmpvar_8.z, (float)zxlerp_12);
  s_10 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_8.y, (float)s_10, (float)nylerp_11));
  s_10 = half(tmpvar_17);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, 1.0));
  tmpvar_18.y = -(s_10);
  half3 tmpvar_19;
  tmpvar_19.xz = half2(float2(1.0, 1.0));
  tmpvar_19.y = s_10;
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = -(s_10);
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_8.yxz), mix (((float3)tmpvar_18 * tmpvar_8.xzy), ((float3)tmpvar_19 * tmpvar_8.zxy), (float3)half3(zxlerp_12)), (float3)half3(nylerp_11));
  uv_9.x = (((0.5 * tmpvar_21.y) / abs(tmpvar_21.x)) + 0.5);
  uv_9.y = (((0.5 * tmpvar_21.z) / abs(tmpvar_21.x)) + 0.5);
  float2 tmpvar_22;
  tmpvar_22 = (uv_9 * _mtl_u._DetailScale);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((tmpvar_22 - (0.5 * _mtl_u._DetailScale)));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_22), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  float3 tmpvar_28;
  tmpvar_28 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_28, tmpvar_28)
  )), 0.0, 1.0);
  tmpvar_29 = half(tmpvar_30);
  half4 tmpvar_31;
  tmpvar_31 = ((_mtl_u._Color * tmpvar_7) * mix (tmpvar_27, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_29)));
  color_2 = tmpvar_31;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_32;
  tmpvar_32 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_33;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 56 math, 4 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mad_pp r0, r0.x, c5.xxxy, c5.yyyx
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 53 math, 1 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedkbmcaceenpgohffmdgjgdkcfpominbddabaaaaaafeajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbmaiaaaaeaaaaaaaahacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaabaaaaaa
ckbabaaaafaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaaj
ccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
aaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaaaaaaaaaadgaaaaagecaabaaa
adaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaaidcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaalganbaaa
aaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaaacaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaa
jgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaabaaaaaa
fgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaaaeaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaaaaaaaaaajgahbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaa
akaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaa
acaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
aaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaajghdbaaa
aaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaaegiocaaaaaaaaaaabbaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half4 v_8;
  v_8 = (tmpvar_7 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_9;
  tmpvar_9.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_11;
  half s_12;
  half nylerp_13;
  half zxlerp_14;
  float3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_14);
  s_12 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, (float)s_12, (float)nylerp_13));
  s_12 = half(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, 1.0));
  tmpvar_20.y = -(s_12);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = s_12;
  half3 tmpvar_22;
  tmpvar_22.xy = half2(float2(1.0, 1.0));
  tmpvar_22.z = -(s_12);
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_22 * tmpvar_10.yxz), mix (((float3)tmpvar_20 * tmpvar_10.xzy), ((float3)tmpvar_21 * tmpvar_10.zxy), (float3)half3(zxlerp_14)), (float3)half3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  float2 tmpvar_24;
  tmpvar_24 = (uv_11 * _mtl_u._DetailScale);
  float2 uvCont_25;
  float2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _mtl_u._DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  float4 tmpvar_27;
  tmpvar_27.xy = dfdx(uvCont_25);
  tmpvar_27.zw = dfdy(uvCont_25);
  half4 tmpvar_28;
  tmpvar_28 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_24), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  float3 tmpvar_30;
  tmpvar_30 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = half(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = ((_mtl_u._Color * tmpvar_9) * mix (tmpvar_29, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_34;
  tmpvar_34 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 56 math, 4 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mad_pp r0, r0.y, c5.xxxy, c5.yyyx
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 53 math, 1 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedomgolidfeidgpdongnffhjapcpgmmjgfabaaaaaafeajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbmaiaaaaeaaaaaaaahacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaabaaaaaa
ckbabaaaafaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaaj
ccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
aaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaaaaaaaaaadgaaaaagecaabaaa
adaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaaidcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaalganbaaa
aaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaaacaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaa
jgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaabaaaaaa
fgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaaaeaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaaaaaaaaaajgahbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaa
akaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaa
acaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
aaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaighhbaaa
aaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaaegiocaaaaaaaaaaabbaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half4 v_8;
  v_8 = (tmpvar_7 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_9;
  tmpvar_9.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_11;
  half s_12;
  half nylerp_13;
  half zxlerp_14;
  float3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_14);
  s_12 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, (float)s_12, (float)nylerp_13));
  s_12 = half(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, 1.0));
  tmpvar_20.y = -(s_12);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = s_12;
  half3 tmpvar_22;
  tmpvar_22.xy = half2(float2(1.0, 1.0));
  tmpvar_22.z = -(s_12);
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_22 * tmpvar_10.yxz), mix (((float3)tmpvar_20 * tmpvar_10.xzy), ((float3)tmpvar_21 * tmpvar_10.zxy), (float3)half3(zxlerp_14)), (float3)half3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  float2 tmpvar_24;
  tmpvar_24 = (uv_11 * _mtl_u._DetailScale);
  float2 uvCont_25;
  float2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _mtl_u._DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  float4 tmpvar_27;
  tmpvar_27.xy = dfdx(uvCont_25);
  tmpvar_27.zw = dfdy(uvCont_25);
  half4 tmpvar_28;
  tmpvar_28 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_24), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  float3 tmpvar_30;
  tmpvar_30 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = half(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = ((_mtl_u._Color * tmpvar_9) * mix (tmpvar_29, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_34;
  tmpvar_34 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 56 math, 4 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mad_pp r0, r0.z, c5.xxxy, c5.yyyx
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 53 math, 1 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedgconapkiimgkoffjhkbjekdklbbcmfhhabaaaaaafeajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbmaiaaaaeaaaaaaaahacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaabaaaaaa
ckbabaaaafaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaaj
ccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
aaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaaaaaaaaaadgaaaaagecaabaaa
adaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaaidcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaalganbaaa
aaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaaacaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaa
jgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaabaaaaaa
fgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaaaeaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaaaaaaaaaajgahbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaa
akaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaa
acaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
aaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghlbaaa
aaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaaegiocaaaaaaaaaaabbaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half4 v_8;
  v_8 = (tmpvar_7 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_9;
  tmpvar_9.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_11;
  half s_12;
  half nylerp_13;
  half zxlerp_14;
  float3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_14);
  s_12 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, (float)s_12, (float)nylerp_13));
  s_12 = half(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, 1.0));
  tmpvar_20.y = -(s_12);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = s_12;
  half3 tmpvar_22;
  tmpvar_22.xy = half2(float2(1.0, 1.0));
  tmpvar_22.z = -(s_12);
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_22 * tmpvar_10.yxz), mix (((float3)tmpvar_20 * tmpvar_10.xzy), ((float3)tmpvar_21 * tmpvar_10.zxy), (float3)half3(zxlerp_14)), (float3)half3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  float2 tmpvar_24;
  tmpvar_24 = (uv_11 * _mtl_u._DetailScale);
  float2 uvCont_25;
  float2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _mtl_u._DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  float4 tmpvar_27;
  tmpvar_27.xy = dfdx(uvCont_25);
  tmpvar_27.zw = dfdy(uvCont_25);
  half4 tmpvar_28;
  tmpvar_28 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_24), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  float3 tmpvar_30;
  tmpvar_30 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = half(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = ((_mtl_u._Color * tmpvar_9) * mix (tmpvar_29, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_34;
  tmpvar_34 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 56 math, 4 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mad_pp r0, r0.w, c5.xxxy, c5.yyyx
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 53 math, 1 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedadhfhgpagccelknebfocooifagngaigkabaaaaaafeajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbmaiaaaaeaaaaaaaahacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaabaaaaaa
ckbabaaaafaaaaaaakaabaaaaaaaaaaackaabaiaebaaaaaaaaaaaaaabnaaaaaj
ccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
aaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaaaaaaaaaadgaaaaagecaabaaa
adaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaaidcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaalganbaaa
aaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaaacaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaacaaaaaa
jgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaadcaaaaajocaabaaaabaaaaaa
fgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaaaeaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaaaaaaaaaajgahbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
aeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaaaaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaa
akaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaa
acaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
aaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaaegiocaaaaaaaaaaabbaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half4 v_8;
  v_8 = (tmpvar_7 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_9;
  tmpvar_9.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_11;
  half s_12;
  half nylerp_13;
  half zxlerp_14;
  float3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_10);
  float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_14 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_13 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_14);
  s_12 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_10.y, (float)s_12, (float)nylerp_13));
  s_12 = half(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, 1.0));
  tmpvar_20.y = -(s_12);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = s_12;
  half3 tmpvar_22;
  tmpvar_22.xy = half2(float2(1.0, 1.0));
  tmpvar_22.z = -(s_12);
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_22 * tmpvar_10.yxz), mix (((float3)tmpvar_20 * tmpvar_10.xzy), ((float3)tmpvar_21 * tmpvar_10.zxy), (float3)half3(zxlerp_14)), (float3)half3(nylerp_13));
  uv_11.x = (((0.5 * tmpvar_23.y) / abs(tmpvar_23.x)) + 0.5);
  uv_11.y = (((0.5 * tmpvar_23.z) / abs(tmpvar_23.x)) + 0.5);
  float2 tmpvar_24;
  tmpvar_24 = (uv_11 * _mtl_u._DetailScale);
  float2 uvCont_25;
  float2 tmpvar_26;
  tmpvar_26 = abs((tmpvar_24 - (0.5 * _mtl_u._DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  float4 tmpvar_27;
  tmpvar_27.xy = dfdx(uvCont_25);
  tmpvar_27.zw = dfdy(uvCont_25);
  half4 tmpvar_28;
  tmpvar_28 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_24), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  float3 tmpvar_30;
  tmpvar_30 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = half(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = ((_mtl_u._Color * tmpvar_9) * mix (tmpvar_29, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_34;
  tmpvar_34 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 85 math, 9 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, -r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r2.yz, r0.xxyw
dsy r0.xy, r0
texldd_pp r5, r1, s0, r2.yzzw, r0
texldd_pp r6, r1, s1, r2.yzzw, r0
cmp_pp r4, r4.y, r5, r6
cmp_pp r0.x, r1.w, r4.z, r4.x
cmp_pp r0.w, r0.w, r0.x, r4.y
mov_pp r0.xyz, r4.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedfdnfjlfgbihgninefgjebpngcllooccnabaaaaaaimaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfeanaaaaeaaaaaaaffadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaag
ccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaa
adaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaa
bnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaa
aaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaak
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaa
aaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaa
cgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaafhcaabaaaabaaaaaapgapbaaa
aaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaaaaaaaaa
bbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaa
agaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaa
afaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaa
acaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaa
acaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaa
acaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaa
boaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaa
claaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaa
bkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaa
egacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaa
abaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaa
acaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaaj
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaa
diaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaia
ibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaia
ebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
acaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaa
agaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaa
aaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 89 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  float3 tmpvar_31;
  tmpvar_31 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_32;
  half s_33;
  half nylerp_34;
  half zxlerp_35;
  float3 tmpvar_36;
  tmpvar_36 = abs(tmpvar_31);
  float tmpvar_37;
  tmpvar_37 = float((tmpvar_36.z >= tmpvar_36.x));
  zxlerp_35 = half(tmpvar_37);
  float tmpvar_38;
  tmpvar_38 = float((max (tmpvar_36.x, tmpvar_36.z) >= tmpvar_36.y));
  nylerp_34 = half(tmpvar_38);
  float tmpvar_39;
  tmpvar_39 = mix (tmpvar_31.x, tmpvar_31.z, (float)zxlerp_35);
  s_33 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = sign(mix (tmpvar_31.y, (float)s_33, (float)nylerp_34));
  s_33 = half(tmpvar_40);
  half3 tmpvar_41;
  tmpvar_41.xz = half2(float2(1.0, 1.0));
  tmpvar_41.y = -(s_33);
  half3 tmpvar_42;
  tmpvar_42.xz = half2(float2(1.0, 1.0));
  tmpvar_42.y = s_33;
  half3 tmpvar_43;
  tmpvar_43.xy = half2(float2(1.0, 1.0));
  tmpvar_43.z = -(s_33);
  float3 tmpvar_44;
  tmpvar_44 = mix (((float3)tmpvar_43 * tmpvar_31.yxz), mix (((float3)tmpvar_41 * tmpvar_31.xzy), ((float3)tmpvar_42 * tmpvar_31.zxy), (float3)half3(zxlerp_35)), (float3)half3(nylerp_34));
  uv_32.x = (((0.5 * tmpvar_44.y) / abs(tmpvar_44.x)) + 0.5);
  uv_32.y = (((0.5 * tmpvar_44.z) / abs(tmpvar_44.x)) + 0.5);
  float2 tmpvar_45;
  tmpvar_45 = (uv_32 * _mtl_u._DetailScale);
  float2 uvCont_46;
  float2 tmpvar_47;
  tmpvar_47 = abs((tmpvar_45 - (0.5 * _mtl_u._DetailScale)));
  uvCont_46.x = max (tmpvar_47.x, tmpvar_47.y);
  uvCont_46.y = min (tmpvar_47.x, tmpvar_47.y);
  float4 tmpvar_48;
  tmpvar_48.xy = dfdx(uvCont_46);
  tmpvar_48.zw = dfdy(uvCont_46);
  half4 tmpvar_49;
  tmpvar_49 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_45), gradient2d((float2)(tmpvar_48.xy), (float2)(tmpvar_48.zw)));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  float3 tmpvar_51;
  tmpvar_51 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_52;
  float tmpvar_53;
  tmpvar_53 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_51, tmpvar_51)
  )), 0.0, 1.0);
  tmpvar_52 = half(tmpvar_53);
  half4 tmpvar_54;
  tmpvar_54 = ((_mtl_u._Color * tmpvar_30) * mix (tmpvar_50, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_52)));
  color_2 = tmpvar_54;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_55;
  tmpvar_55 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_56;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 83 math, 9 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, -r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r5, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r4.y, r5.w, r0.w
mov r0.xyz, c5.y
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 84 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedgopacnhieimfnabjcmiobepgmhnkjnbcabaaaaaabaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcniamaaaaeaaaaaaadgadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaag
ccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaa
adaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaa
bnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaa
aaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaak
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaa
aaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaacaaaaaa
cgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaejaaaaan
pcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaa
aeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  half4 v_31;
  v_31 = (tmpvar_30 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, 1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = s_35;
  half3 tmpvar_45;
  tmpvar_45.xy = half2(float2(1.0, 1.0));
  tmpvar_45.z = -(s_35);
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_45 * tmpvar_33.yxz), mix (((float3)tmpvar_43 * tmpvar_33.xzy), ((float3)tmpvar_44 * tmpvar_33.zxy), (float3)half3(zxlerp_37)), (float3)half3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  float2 tmpvar_47;
  tmpvar_47 = (uv_34 * _mtl_u._DetailScale);
  float2 uvCont_48;
  float2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _mtl_u._DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  float4 tmpvar_50;
  tmpvar_50.xy = dfdx(uvCont_48);
  tmpvar_50.zw = dfdy(uvCont_48);
  half4 tmpvar_51;
  tmpvar_51 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_47), gradient2d((float2)(tmpvar_50.xy), (float2)(tmpvar_50.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  float3 tmpvar_53;
  tmpvar_53 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = half(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = ((_mtl_u._Color * tmpvar_32) * mix (tmpvar_52, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_57;
  tmpvar_57 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 83 math, 9 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, -r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r5, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r4.y, r5.w, r0.w
mov r0.xyz, c5.y
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 84 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedgopacnhieimfnabjcmiobepgmhnkjnbcabaaaaaabaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcniamaaaaeaaaaaaadgadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaag
ccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaa
adaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaa
bnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaa
aaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaak
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaa
aaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaacaaaaaa
cgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaejaaaaan
pcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaa
aeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  half4 v_31;
  v_31 = (tmpvar_30 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, 1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = s_35;
  half3 tmpvar_45;
  tmpvar_45.xy = half2(float2(1.0, 1.0));
  tmpvar_45.z = -(s_35);
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_45 * tmpvar_33.yxz), mix (((float3)tmpvar_43 * tmpvar_33.xzy), ((float3)tmpvar_44 * tmpvar_33.zxy), (float3)half3(zxlerp_37)), (float3)half3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  float2 tmpvar_47;
  tmpvar_47 = (uv_34 * _mtl_u._DetailScale);
  float2 uvCont_48;
  float2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _mtl_u._DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  float4 tmpvar_50;
  tmpvar_50.xy = dfdx(uvCont_48);
  tmpvar_50.zw = dfdy(uvCont_48);
  half4 tmpvar_51;
  tmpvar_51 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_47), gradient2d((float2)(tmpvar_50.xy), (float2)(tmpvar_50.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  float3 tmpvar_53;
  tmpvar_53 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = half(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = ((_mtl_u._Color * tmpvar_32) * mix (tmpvar_52, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_57;
  tmpvar_57 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 83 math, 9 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, -r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r5, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r4.y, r5.w, r0.w
mov r0.xyz, c5.y
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 84 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedgopacnhieimfnabjcmiobepgmhnkjnbcabaaaaaabaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcniamaaaaeaaaaaaadgadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaag
ccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaa
adaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaa
bnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaa
aaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaak
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaa
aaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaacaaaaaa
cgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaejaaaaan
pcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaa
aeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  half4 v_31;
  v_31 = (tmpvar_30 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, 1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = s_35;
  half3 tmpvar_45;
  tmpvar_45.xy = half2(float2(1.0, 1.0));
  tmpvar_45.z = -(s_35);
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_45 * tmpvar_33.yxz), mix (((float3)tmpvar_43 * tmpvar_33.xzy), ((float3)tmpvar_44 * tmpvar_33.zxy), (float3)half3(zxlerp_37)), (float3)half3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  float2 tmpvar_47;
  tmpvar_47 = (uv_34 * _mtl_u._DetailScale);
  float2 uvCont_48;
  float2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _mtl_u._DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  float4 tmpvar_50;
  tmpvar_50.xy = dfdx(uvCont_48);
  tmpvar_50.zw = dfdy(uvCont_48);
  half4 tmpvar_51;
  tmpvar_51 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_47), gradient2d((float2)(tmpvar_50.xy), (float2)(tmpvar_50.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  float3 tmpvar_53;
  tmpvar_53 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = half(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = ((_mtl_u._Color * tmpvar_32) * mix (tmpvar_52, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_57;
  tmpvar_57 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 85 math, 9 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.xyz, r0.x, v4.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c5.x, c5.y
cmp r1.y, r1.y, c5.z, c5.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c5.y
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c5.y
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c6.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c6.x
mad r0.y, r0.z, c6.x, c6.x
mul r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, -r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r2.yz, r0.xxyw
dsy r0.xy, r0
texldd_pp r5, r1, s0, r2.yzzw, r0
texldd_pp r6, r1, s1, r2.yzzw, r0
cmp_pp r0.xyz, r4.y, r5, r6
cmp_pp r0.x, r1.w, r0.z, r0.x
cmp_pp r0.w, r0.w, r0.x, r0.y
mov r0.xyz, c5.y
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedgcjhbkbfliindbciihhlnnhanjiklihjabaaaaaajiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgaanaaaaeaaaaaaafiadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaa
aaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaag
ccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaa
adaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaa
bnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaa
aaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaak
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaa
aaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaa
cgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaaegacbaaa
afaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_9) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (-(tmpvar_10.y), (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_9), nylerp_8);
  half4 v_31;
  v_31 = (tmpvar_30 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  float3 tmpvar_33;
  tmpvar_33 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_33);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_37 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_36 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_33.x, tmpvar_33.z, (float)zxlerp_37);
  s_35 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_33.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, 1.0));
  tmpvar_43.y = -(s_35);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = s_35;
  half3 tmpvar_45;
  tmpvar_45.xy = half2(float2(1.0, 1.0));
  tmpvar_45.z = -(s_35);
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_45 * tmpvar_33.yxz), mix (((float3)tmpvar_43 * tmpvar_33.xzy), ((float3)tmpvar_44 * tmpvar_33.zxy), (float3)half3(zxlerp_37)), (float3)half3(nylerp_36));
  uv_34.x = (((0.5 * tmpvar_46.y) / abs(tmpvar_46.x)) + 0.5);
  uv_34.y = (((0.5 * tmpvar_46.z) / abs(tmpvar_46.x)) + 0.5);
  float2 tmpvar_47;
  tmpvar_47 = (uv_34 * _mtl_u._DetailScale);
  float2 uvCont_48;
  float2 tmpvar_49;
  tmpvar_49 = abs((tmpvar_47 - (0.5 * _mtl_u._DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  float4 tmpvar_50;
  tmpvar_50.xy = dfdx(uvCont_48);
  tmpvar_50.zw = dfdy(uvCont_48);
  half4 tmpvar_51;
  tmpvar_51 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_47), gradient2d((float2)(tmpvar_50.xy), (float2)(tmpvar_50.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  float3 tmpvar_53;
  tmpvar_53 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = half(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = ((_mtl_u._Color * tmpvar_32) * mix (tmpvar_52, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_57;
  tmpvar_57 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 86 math, 21 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c5.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c5.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c6.x
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c6.x
mad r1.y, r1.z, c6.x, c6.x
mul r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedhpeoccandehpapeplpjkomjfppljognbabaaaaaabibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoaaoaaaaeaaaaaaaliadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaaafaaaaaapgapbaaaaaaaaaaa
egaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
agaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaaahaaaaaadcaaaaajpcaabaaa
agaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaaj
pcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaa
aeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_38;
  half s_39;
  half nylerp_40;
  half zxlerp_41;
  float3 tmpvar_42;
  tmpvar_42 = abs(tmpvar_37);
  float tmpvar_43;
  tmpvar_43 = float((tmpvar_42.z >= tmpvar_42.x));
  zxlerp_41 = half(tmpvar_43);
  float tmpvar_44;
  tmpvar_44 = float((max (tmpvar_42.x, tmpvar_42.z) >= tmpvar_42.y));
  nylerp_40 = half(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = mix (tmpvar_37.x, tmpvar_37.z, (float)zxlerp_41);
  s_39 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = sign(mix (tmpvar_37.y, (float)s_39, (float)nylerp_40));
  s_39 = half(tmpvar_46);
  half3 tmpvar_47;
  tmpvar_47.xz = half2(float2(1.0, 1.0));
  tmpvar_47.y = -(s_39);
  half3 tmpvar_48;
  tmpvar_48.xz = half2(float2(1.0, 1.0));
  tmpvar_48.y = s_39;
  half3 tmpvar_49;
  tmpvar_49.xy = half2(float2(1.0, 1.0));
  tmpvar_49.z = -(s_39);
  float3 tmpvar_50;
  tmpvar_50 = mix (((float3)tmpvar_49 * tmpvar_37.yxz), mix (((float3)tmpvar_47 * tmpvar_37.xzy), ((float3)tmpvar_48 * tmpvar_37.zxy), (float3)half3(zxlerp_41)), (float3)half3(nylerp_40));
  uv_38.x = (((0.5 * tmpvar_50.y) / abs(tmpvar_50.x)) + 0.5);
  uv_38.y = (((0.5 * tmpvar_50.z) / abs(tmpvar_50.x)) + 0.5);
  float2 tmpvar_51;
  tmpvar_51 = (uv_38 * _mtl_u._DetailScale);
  float2 uvCont_52;
  float2 tmpvar_53;
  tmpvar_53 = abs((tmpvar_51 - (0.5 * _mtl_u._DetailScale)));
  uvCont_52.x = max (tmpvar_53.x, tmpvar_53.y);
  uvCont_52.y = min (tmpvar_53.x, tmpvar_53.y);
  float4 tmpvar_54;
  tmpvar_54.xy = dfdx(uvCont_52);
  tmpvar_54.zw = dfdy(uvCont_52);
  half4 tmpvar_55;
  tmpvar_55 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_51), gradient2d((float2)(tmpvar_54.xy), (float2)(tmpvar_54.zw)));
  half4 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  float3 tmpvar_57;
  tmpvar_57 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_58;
  float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_57, tmpvar_57)
  )), 0.0, 1.0);
  tmpvar_58 = half(tmpvar_59);
  half4 tmpvar_60;
  tmpvar_60 = ((_mtl_u._Color * mix (
    mix (tmpvar_30, tmpvar_32, half4(half((s_7 >= (half)0.0))))
  , 
    mix (mix (tmpvar_26, tmpvar_28, half4(half((s_7 >= (half)0.0)))), mix (tmpvar_34, tmpvar_36, half4(half((s_7 >= (half)0.0)))), half4(zxlerp_9))
  , half4(nylerp_8))) * mix (tmpvar_56, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_58)));
  color_2 = tmpvar_60;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_61;
  tmpvar_61 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_62;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 87 math, 21 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.x, r3.x
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.x, r3.x
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.x, r3.x
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c5.y
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c5.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c5.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c6.x
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c6.x
mad r1.y, r1.z, c6.x, c6.x
mul r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedfpochgcedgalfnbejelneofbhdldfkepabaaaaaadibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaaapaaaaeaaaaaaamaadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaafaaaaaa
akaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaa
aaaaaaaaakaabaaaafaaaaaaakaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaa
aaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaagaaaaaaaaaaaaai
bcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaia
ebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, half4(
    half((s_7 >= (half)0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, half4(half((s_7 >= (half)0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, half4(half((s_7 >= (half)0.0))))
  , half4(zxlerp_9)), half4(nylerp_8)) * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, (float)zxlerp_43);
  s_41 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_48);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, 1.0));
  tmpvar_49.y = -(s_41);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = s_41;
  half3 tmpvar_51;
  tmpvar_51.xy = half2(float2(1.0, 1.0));
  tmpvar_51.z = -(s_41);
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_51 * tmpvar_39.yxz), mix (((float3)tmpvar_49 * tmpvar_39.xzy), ((float3)tmpvar_50 * tmpvar_39.zxy), (float3)half3(zxlerp_43)), (float3)half3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  float2 tmpvar_53;
  tmpvar_53 = (uv_40 * _mtl_u._DetailScale);
  float2 uvCont_54;
  float2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _mtl_u._DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_54);
  tmpvar_56.zw = dfdy(uvCont_54);
  half4 tmpvar_57;
  tmpvar_57 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_53), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  float3 tmpvar_59;
  tmpvar_59 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = half(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = ((_mtl_u._Color * tmpvar_38) * mix (tmpvar_58, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_63;
  tmpvar_63 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 87 math, 21 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.y, r3.y
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.y, r3.y
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.y, r3.y
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c5.y
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c5.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c5.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c6.x
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c6.x
mad r1.y, r1.z, c6.x, c6.x
mul r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedkmcjjpdldhcajhdmdocgdcbaapkpnommabaaaaaadibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaaapaaaaeaaaaaaamaadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaaaafaaaaaa
bkaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaa
aaaaaaaabkaabaaaafaaaaaabkaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaa
aaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaaagaaaaaaaaaaaaai
bcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaaaacaaaaaabkaabaia
ebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
aaaaaaaabkaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, half4(
    half((s_7 >= (half)0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, half4(half((s_7 >= (half)0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, half4(half((s_7 >= (half)0.0))))
  , half4(zxlerp_9)), half4(nylerp_8)) * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, (float)zxlerp_43);
  s_41 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_48);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, 1.0));
  tmpvar_49.y = -(s_41);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = s_41;
  half3 tmpvar_51;
  tmpvar_51.xy = half2(float2(1.0, 1.0));
  tmpvar_51.z = -(s_41);
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_51 * tmpvar_39.yxz), mix (((float3)tmpvar_49 * tmpvar_39.xzy), ((float3)tmpvar_50 * tmpvar_39.zxy), (float3)half3(zxlerp_43)), (float3)half3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  float2 tmpvar_53;
  tmpvar_53 = (uv_40 * _mtl_u._DetailScale);
  float2 uvCont_54;
  float2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _mtl_u._DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_54);
  tmpvar_56.zw = dfdy(uvCont_54);
  half4 tmpvar_57;
  tmpvar_57 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_53), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  float3 tmpvar_59;
  tmpvar_59 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = half(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = ((_mtl_u._Color * tmpvar_38) * mix (tmpvar_58, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_63;
  tmpvar_63 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 87 math, 21 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.z, r3.z
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.z, r3.z
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.z, r3.z
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c5.y
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c5.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c5.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c6.x
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c6.x
mad r1.y, r1.z, c6.x, c6.x
mul r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedanjenhoadecfijiaapacoihldjedknfiabaaaaaadibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaaapaaaaeaaaaaaamaadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaaaaaaaaaackaabaaaafaaaaaa
ckaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaackaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaa
aaaaaaaackaabaaaafaaaaaackaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaa
aaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaagaaaaaaaaaaaaai
bcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, half4(
    half((s_7 >= (half)0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, half4(half((s_7 >= (half)0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, half4(half((s_7 >= (half)0.0))))
  , half4(zxlerp_9)), half4(nylerp_8)) * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, (float)zxlerp_43);
  s_41 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_48);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, 1.0));
  tmpvar_49.y = -(s_41);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = s_41;
  half3 tmpvar_51;
  tmpvar_51.xy = half2(float2(1.0, 1.0));
  tmpvar_51.z = -(s_41);
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_51 * tmpvar_39.yxz), mix (((float3)tmpvar_49 * tmpvar_39.xzy), ((float3)tmpvar_50 * tmpvar_39.zxy), (float3)half3(zxlerp_43)), (float3)half3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  float2 tmpvar_53;
  tmpvar_53 = (uv_40 * _mtl_u._DetailScale);
  float2 uvCont_54;
  float2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _mtl_u._DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_54);
  tmpvar_56.zw = dfdy(uvCont_54);
  half4 tmpvar_57;
  tmpvar_57 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_53), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  float3 tmpvar_59;
  tmpvar_59 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = half(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = ((_mtl_u._Color * tmpvar_38) * mix (tmpvar_58, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_63;
  tmpvar_63 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 87 math, 21 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.w, r3.w
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.w, r3.w
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.w, r3.w
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c5.y
mul_pp r0, r0, c1
dp3 r1.x, v4, v4
rsq r1.x, r1.x
mul r1.xyz, r1.x, v4.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c5.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c5.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c6.x
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c6.x
mad r1.y, r1.z, c6.x, c6.x
mul r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 91 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedjjkacbnpgblhhomcdhpkfjhgoilfpkdaabaaaaaadibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaaapaaaaeaaaaaaamaadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaaaafaaaaaa
dkaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaa
aaaaaaaadkaabaaaafaaaaaadkaabaiaebaaaaaaagaaaaaadcaaaaajccaabaaa
aaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaagaaaaaaaaaaaaai
bcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaadkaabaaaacaaaaaadkaabaia
ebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float2 uv_5;
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  uv_5 = float2(tmpvar_21);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_5 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_5), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, half4(
    half((s_7 >= (half)0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, half4(half((s_7 >= (half)0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, half4(half((s_7 >= (half)0.0))))
  , half4(zxlerp_9)), half4(nylerp_8)) * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_39);
  float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_43 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_42 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = mix (tmpvar_39.x, tmpvar_39.z, (float)zxlerp_43);
  s_41 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_39.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_48);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, 1.0));
  tmpvar_49.y = -(s_41);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = s_41;
  half3 tmpvar_51;
  tmpvar_51.xy = half2(float2(1.0, 1.0));
  tmpvar_51.z = -(s_41);
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_51 * tmpvar_39.yxz), mix (((float3)tmpvar_49 * tmpvar_39.xzy), ((float3)tmpvar_50 * tmpvar_39.zxy), (float3)half3(zxlerp_43)), (float3)half3(nylerp_42));
  uv_40.x = (((0.5 * tmpvar_52.y) / abs(tmpvar_52.x)) + 0.5);
  uv_40.y = (((0.5 * tmpvar_52.z) / abs(tmpvar_52.x)) + 0.5);
  float2 tmpvar_53;
  tmpvar_53 = (uv_40 * _mtl_u._DetailScale);
  float2 uvCont_54;
  float2 tmpvar_55;
  tmpvar_55 = abs((tmpvar_53 - (0.5 * _mtl_u._DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_54);
  tmpvar_56.zw = dfdy(uvCont_54);
  half4 tmpvar_57;
  tmpvar_57 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_53), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  float3 tmpvar_59;
  tmpvar_59 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = half(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = ((_mtl_u._Color * tmpvar_38) * mix (tmpvar_58, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_63;
  tmpvar_63 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 99 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, -0, 0, -3.14159274, 1
def c12, 0.318309873, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c8.x, c8.y
cmp r2.y, r2.y, -c8.x, -c8.y
add_pp r3.y, r2.y, r2.z
mov r3.xz, c8.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c8.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c9.y
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c9.y
mad r1.y, r1.z, c9.y, c9.y
mul r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefieceddpdlhookjikcmngdabjknpicmfhambacabaaaaaaleaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmanaaaaeaaaaaaafpadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaa
bkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaa
acaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaia
ebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaa
abaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaai
dcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaa
dcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaa
afaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaa
abaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaa
acaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaaj
ecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
alaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
acaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaa
aaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaa
dkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaa
aaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
mnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  float3 tmpvar_15;
  tmpvar_15 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_16;
  half s_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_15);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  zxlerp_19 = half(tmpvar_21);
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  nylerp_18 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = mix (tmpvar_15.x, tmpvar_15.z, (float)zxlerp_19);
  s_17 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_15.y, (float)s_17, (float)nylerp_18));
  s_17 = half(tmpvar_24);
  half3 tmpvar_25;
  tmpvar_25.xz = half2(float2(1.0, 1.0));
  tmpvar_25.y = -(s_17);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, 1.0));
  tmpvar_26.y = s_17;
  half3 tmpvar_27;
  tmpvar_27.xy = half2(float2(1.0, 1.0));
  tmpvar_27.z = -(s_17);
  float3 tmpvar_28;
  tmpvar_28 = mix (((float3)tmpvar_27 * tmpvar_15.yxz), mix (((float3)tmpvar_25 * tmpvar_15.xzy), ((float3)tmpvar_26 * tmpvar_15.zxy), (float3)half3(zxlerp_19)), (float3)half3(nylerp_18));
  uv_16.x = (((0.5 * tmpvar_28.y) / abs(tmpvar_28.x)) + 0.5);
  uv_16.y = (((0.5 * tmpvar_28.z) / abs(tmpvar_28.x)) + 0.5);
  float2 tmpvar_29;
  tmpvar_29 = (uv_16 * _mtl_u._DetailScale);
  float2 uvCont_30;
  float2 tmpvar_31;
  tmpvar_31 = abs((tmpvar_29 - (0.5 * _mtl_u._DetailScale)));
  uvCont_30.x = max (tmpvar_31.x, tmpvar_31.y);
  uvCont_30.y = min (tmpvar_31.x, tmpvar_31.y);
  float4 tmpvar_32;
  tmpvar_32.xy = dfdx(uvCont_30);
  tmpvar_32.zw = dfdy(uvCont_30);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_29), gradient2d((float2)(tmpvar_32.xy), (float2)(tmpvar_32.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  float3 tmpvar_35;
  tmpvar_35 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_35, tmpvar_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_34, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  color_2 = tmpvar_38;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_39;
  tmpvar_39 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_40;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 100 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, -0, 0, -3.14159274, 1
def c12, 0.318309873, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.x, c8.xxxy, c8.yyyx
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c8.x, c8.y
cmp r2.y, r2.y, -c8.x, -c8.y
add_pp r3.y, r2.y, r2.z
mov r3.xz, c8.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c8.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c9.y
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c9.y
mad r1.y, r1.z, c9.y, c9.y
mul r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedicagoallnnlbimpajjnigcegmknadjdlabaaaaaamiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaanaaaaeaaaaaaageadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaajghdbaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaaipcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaah
ccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 v_15;
  v_15 = (tmpvar_14 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_16;
  tmpvar_16.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_18;
  half s_19;
  half nylerp_20;
  half zxlerp_21;
  float3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, (float)zxlerp_21);
  s_19 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, (float)s_19, (float)nylerp_20));
  s_19 = half(tmpvar_26);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = -(s_19);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, 1.0));
  tmpvar_28.y = s_19;
  half3 tmpvar_29;
  tmpvar_29.xy = half2(float2(1.0, 1.0));
  tmpvar_29.z = -(s_19);
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_29 * tmpvar_17.yxz), mix (((float3)tmpvar_27 * tmpvar_17.xzy), ((float3)tmpvar_28 * tmpvar_17.zxy), (float3)half3(zxlerp_21)), (float3)half3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  float2 tmpvar_31;
  tmpvar_31 = (uv_18 * _mtl_u._DetailScale);
  float2 uvCont_32;
  float2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _mtl_u._DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  float4 tmpvar_34;
  tmpvar_34.xy = dfdx(uvCont_32);
  tmpvar_34.zw = dfdy(uvCont_32);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_31), gradient2d((float2)(tmpvar_34.xy), (float2)(tmpvar_34.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_36, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_41;
  tmpvar_41 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_R_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 100 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, -0, 0, -3.14159274, 1
def c12, 0.318309873, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.y, c8.xxxy, c8.yyyx
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c8.x, c8.y
cmp r2.y, r2.y, -c8.x, -c8.y
add_pp r3.y, r2.y, r2.z
mov r3.xz, c8.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c8.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c9.y
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c9.y
mad r1.y, r1.z, c9.y, c9.y
mul r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedpgehmohoohihmjcdodgcdljncajdilknabaaaaaamiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaanaaaaeaaaaaaageadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaighhbaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaaipcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaah
ccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 v_15;
  v_15 = (tmpvar_14 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_16;
  tmpvar_16.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_18;
  half s_19;
  half nylerp_20;
  half zxlerp_21;
  float3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, (float)zxlerp_21);
  s_19 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, (float)s_19, (float)nylerp_20));
  s_19 = half(tmpvar_26);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = -(s_19);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, 1.0));
  tmpvar_28.y = s_19;
  half3 tmpvar_29;
  tmpvar_29.xy = half2(float2(1.0, 1.0));
  tmpvar_29.z = -(s_19);
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_29 * tmpvar_17.yxz), mix (((float3)tmpvar_27 * tmpvar_17.xzy), ((float3)tmpvar_28 * tmpvar_17.zxy), (float3)half3(zxlerp_21)), (float3)half3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  float2 tmpvar_31;
  tmpvar_31 = (uv_18 * _mtl_u._DetailScale);
  float2 uvCont_32;
  float2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _mtl_u._DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  float4 tmpvar_34;
  tmpvar_34.xy = dfdx(uvCont_32);
  tmpvar_34.zw = dfdy(uvCont_32);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_31), gradient2d((float2)(tmpvar_34.xy), (float2)(tmpvar_34.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_36, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_41;
  tmpvar_41 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_G_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 100 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, -0, 0, -3.14159274, 1
def c12, 0.318309873, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.z, c8.xxxy, c8.yyyx
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c8.x, c8.y
cmp r2.y, r2.y, -c8.x, -c8.y
add_pp r3.y, r2.y, r2.z
mov r3.xz, c8.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c8.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c9.y
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c9.y
mad r1.y, r1.z, c9.y, c9.y
mul r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefieceddeniepeppcanaememgnlipieppblljggabaaaaaamiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaanaaaaeaaaaaaageadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghlbaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaaipcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaah
ccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 v_15;
  v_15 = (tmpvar_14 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_16;
  tmpvar_16.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_18;
  half s_19;
  half nylerp_20;
  half zxlerp_21;
  float3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, (float)zxlerp_21);
  s_19 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, (float)s_19, (float)nylerp_20));
  s_19 = half(tmpvar_26);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = -(s_19);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, 1.0));
  tmpvar_28.y = s_19;
  half3 tmpvar_29;
  tmpvar_29.xy = half2(float2(1.0, 1.0));
  tmpvar_29.z = -(s_19);
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_29 * tmpvar_17.yxz), mix (((float3)tmpvar_27 * tmpvar_17.xzy), ((float3)tmpvar_28 * tmpvar_17.zxy), (float3)half3(zxlerp_21)), (float3)half3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  float2 tmpvar_31;
  tmpvar_31 = (uv_18 * _mtl_u._DetailScale);
  float2 uvCont_32;
  float2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _mtl_u._DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  float4 tmpvar_34;
  tmpvar_34.xy = dfdx(uvCont_32);
  tmpvar_34.zw = dfdy(uvCont_32);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_31), gradient2d((float2)(tmpvar_34.xy), (float2)(tmpvar_34.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_36, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_41;
  tmpvar_41 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_B_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 100 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, -0, 0, -3.14159274, 1
def c12, 0.318309873, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mad_pp r0, r0.w, c8.xxxy, c8.yyyx
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c8.x, c8.y
cmp r2.y, r2.y, -c8.x, -c8.y
add_pp r3.y, r2.y, r2.z
mov r3.xz, c8.y
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c8.y
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c9.y
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c9.y
mad r1.y, r1.z, c9.y, c9.y
mul r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedagkmminelpkgcacccfpcmcfoohdmjhdbabaaaaaamiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaanaaaaeaaaaaaageadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadgaaaaafbcaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaaipcaabaaaaaaaaaaaagambaaaaaaaaaaaegiocaaa
aaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaa
abaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaa
ckbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaaj
ccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
abaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaa
abaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaa
abaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaa
aeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaa
abaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaa
jgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaa
fgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaa
afaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaa
agiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaa
akaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaa
adaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaa
abaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaak
bcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
dicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaa
aaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaah
ccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 129 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 v_15;
  v_15 = (tmpvar_14 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_16;
  tmpvar_16.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_18;
  half s_19;
  half nylerp_20;
  half zxlerp_21;
  float3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_17);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_21 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_20 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = mix (tmpvar_17.x, tmpvar_17.z, (float)zxlerp_21);
  s_19 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_17.y, (float)s_19, (float)nylerp_20));
  s_19 = half(tmpvar_26);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, 1.0));
  tmpvar_27.y = -(s_19);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, 1.0));
  tmpvar_28.y = s_19;
  half3 tmpvar_29;
  tmpvar_29.xy = half2(float2(1.0, 1.0));
  tmpvar_29.z = -(s_19);
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_29 * tmpvar_17.yxz), mix (((float3)tmpvar_27 * tmpvar_17.xzy), ((float3)tmpvar_28 * tmpvar_17.zxy), (float3)half3(zxlerp_21)), (float3)half3(nylerp_20));
  uv_18.x = (((0.5 * tmpvar_30.y) / abs(tmpvar_30.x)) + 0.5);
  uv_18.y = (((0.5 * tmpvar_30.z) / abs(tmpvar_30.x)) + 0.5);
  float2 tmpvar_31;
  tmpvar_31 = (uv_18 * _mtl_u._DetailScale);
  float2 uvCont_32;
  float2 tmpvar_33;
  tmpvar_33 = abs((tmpvar_31 - (0.5 * _mtl_u._DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  float4 tmpvar_34;
  tmpvar_34.xy = dfdx(uvCont_32);
  tmpvar_34.zw = dfdy(uvCont_32);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_31), gradient2d((float2)(tmpvar_34.xy), (float2)(tmpvar_34.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_36, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_41;
  tmpvar_41 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_A_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 58 math, 4 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 0.5, 0, -1, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.x
mad r0.y, r0.z, c7.x, c7.x
mul r0.xy, r0, c2.x
mov r1.x, c7.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.yyyz
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 57 math, 1 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedigbbebfhhklfhbhpckiinchmndeleckhabaaaaaameajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcimaiaaaaeaaaaaaacdacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaabaaaaaackbabaaaafaaaaaaakaabaaaaaaaaaaackaabaia
ebaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaa
aaaaaaaadgaaaaagecaabaaaadaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaai
dcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaaeaaaaaalganbaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaa
acaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaajgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaa
dcaaaaajocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaa
aeaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaa
aaaaaaaajgahbaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaabaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
abaaaaaaaaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaapcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaa
egaobaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaa
abaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  float3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_10;
  half s_11;
  half nylerp_12;
  half zxlerp_13;
  float3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_9);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  zxlerp_13 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  nylerp_12 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = mix (tmpvar_9.x, tmpvar_9.z, (float)zxlerp_13);
  s_11 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = sign(mix (tmpvar_9.y, (float)s_11, (float)nylerp_12));
  s_11 = half(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xz = half2(float2(1.0, 1.0));
  tmpvar_19.y = -(s_11);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, 1.0));
  tmpvar_20.y = s_11;
  half3 tmpvar_21;
  tmpvar_21.xy = half2(float2(1.0, 1.0));
  tmpvar_21.z = -(s_11);
  float3 tmpvar_22;
  tmpvar_22 = mix (((float3)tmpvar_21 * tmpvar_9.yxz), mix (((float3)tmpvar_19 * tmpvar_9.xzy), ((float3)tmpvar_20 * tmpvar_9.zxy), (float3)half3(zxlerp_13)), (float3)half3(nylerp_12));
  uv_10.x = (((0.5 * tmpvar_22.y) / abs(tmpvar_22.x)) + 0.5);
  uv_10.y = (((0.5 * tmpvar_22.z) / abs(tmpvar_22.x)) + 0.5);
  float2 tmpvar_23;
  tmpvar_23 = (uv_10 * _mtl_u._DetailScale);
  float2 uvCont_24;
  float2 tmpvar_25;
  tmpvar_25 = abs((tmpvar_23 - (0.5 * _mtl_u._DetailScale)));
  uvCont_24.x = max (tmpvar_25.x, tmpvar_25.y);
  uvCont_24.y = min (tmpvar_25.x, tmpvar_25.y);
  float4 tmpvar_26;
  tmpvar_26.xy = dfdx(uvCont_24);
  tmpvar_26.zw = dfdy(uvCont_24);
  half4 tmpvar_27;
  tmpvar_27 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_23), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  float3 tmpvar_29;
  tmpvar_29 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_29, tmpvar_29)
  )), 0.0, 1.0);
  tmpvar_30 = half(tmpvar_31);
  half4 tmpvar_32;
  tmpvar_32 = ((_mtl_u._Color * tmpvar_8) * mix (tmpvar_28, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_30)));
  color_2 = tmpvar_32;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_33;
  tmpvar_33 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_34;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 59 math, 4 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 0.5, 0, -1, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.x
mad r0.y, r0.z, c7.x, c7.x
mul r0.xy, r0, c2.x
mov r1.x, c7.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mad_pp r0, r0.x, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.yyyz
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 57 math, 1 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedpegkkbjlplmbiojajneaankfocbigagdabaaaaaaniajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaaiaaaaeaaaaaaaciacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaabaaaaaackbabaaaafaaaaaaakaabaaaaaaaaaaackaabaia
ebaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaa
aaaaaaaadgaaaaagecaabaaaadaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaai
dcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaaeaaaaaalganbaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaa
acaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaajgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaa
dcaaaaajocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaa
aeaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaa
aaaaaaaajgahbaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaabaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
abaaaaaaaaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaapcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaa
egaobaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaajghdbaaaaaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaa
egiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaa
abeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half4 v_9;
  v_9 = (tmpvar_8 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_10;
  tmpvar_10.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_12;
  half s_13;
  half nylerp_14;
  half zxlerp_15;
  float3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_15);
  s_13 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, (float)s_13, (float)nylerp_14));
  s_13 = half(tmpvar_20);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = -(s_13);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, 1.0));
  tmpvar_22.y = s_13;
  half3 tmpvar_23;
  tmpvar_23.xy = half2(float2(1.0, 1.0));
  tmpvar_23.z = -(s_13);
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_23 * tmpvar_11.yxz), mix (((float3)tmpvar_21 * tmpvar_11.xzy), ((float3)tmpvar_22 * tmpvar_11.zxy), (float3)half3(zxlerp_15)), (float3)half3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  float2 tmpvar_25;
  tmpvar_25 = (uv_12 * _mtl_u._DetailScale);
  float2 uvCont_26;
  float2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _mtl_u._DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  float4 tmpvar_28;
  tmpvar_28.xy = dfdx(uvCont_26);
  tmpvar_28.zw = dfdy(uvCont_26);
  half4 tmpvar_29;
  tmpvar_29 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_25), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  float3 tmpvar_31;
  tmpvar_31 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = half(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = ((_mtl_u._Color * tmpvar_10) * mix (tmpvar_30, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_35;
  tmpvar_35 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 59 math, 4 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 0.5, 0, -1, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.x
mad r0.y, r0.z, c7.x, c7.x
mul r0.xy, r0, c2.x
mov r1.x, c7.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mad_pp r0, r0.y, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.yyyz
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 57 math, 1 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedhlbidmekmokbjnijbcpojgmnajloefababaaaaaaniajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaaiaaaaeaaaaaaaciacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaabaaaaaackbabaaaafaaaaaaakaabaaaaaaaaaaackaabaia
ebaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaa
aaaaaaaadgaaaaagecaabaaaadaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaai
dcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaaeaaaaaalganbaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaa
acaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaajgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaa
dcaaaaajocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaa
aeaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaa
aaaaaaaajgahbaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaabaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
abaaaaaaaaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaapcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaa
egaobaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaighhbaaaaaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaa
egiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaa
abeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half4 v_9;
  v_9 = (tmpvar_8 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_10;
  tmpvar_10.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_12;
  half s_13;
  half nylerp_14;
  half zxlerp_15;
  float3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_15);
  s_13 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, (float)s_13, (float)nylerp_14));
  s_13 = half(tmpvar_20);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = -(s_13);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, 1.0));
  tmpvar_22.y = s_13;
  half3 tmpvar_23;
  tmpvar_23.xy = half2(float2(1.0, 1.0));
  tmpvar_23.z = -(s_13);
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_23 * tmpvar_11.yxz), mix (((float3)tmpvar_21 * tmpvar_11.xzy), ((float3)tmpvar_22 * tmpvar_11.zxy), (float3)half3(zxlerp_15)), (float3)half3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  float2 tmpvar_25;
  tmpvar_25 = (uv_12 * _mtl_u._DetailScale);
  float2 uvCont_26;
  float2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _mtl_u._DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  float4 tmpvar_28;
  tmpvar_28.xy = dfdx(uvCont_26);
  tmpvar_28.zw = dfdy(uvCont_26);
  half4 tmpvar_29;
  tmpvar_29 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_25), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  float3 tmpvar_31;
  tmpvar_31 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = half(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = ((_mtl_u._Color * tmpvar_10) * mix (tmpvar_30, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_35;
  tmpvar_35 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 59 math, 4 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 0.5, 0, -1, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.x
mad r0.y, r0.z, c7.x, c7.x
mul r0.xy, r0, c2.x
mov r1.x, c7.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mad_pp r0, r0.z, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.yyyz
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 57 math, 1 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedjfkdmoindbadkldmnicikhjdaalidndeabaaaaaaniajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaaiaaaaeaaaaaaaciacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaabaaaaaackbabaaaafaaaaaaakaabaaaaaaaaaaackaabaia
ebaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaa
aaaaaaaadgaaaaagecaabaaaadaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaai
dcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaaeaaaaaalganbaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaa
acaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaajgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaa
dcaaaaajocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaa
aeaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaa
aaaaaaaajgahbaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaabaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
abaaaaaaaaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaapcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaa
egaobaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghlbaaaaaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaa
egiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaa
abeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half4 v_9;
  v_9 = (tmpvar_8 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_10;
  tmpvar_10.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_12;
  half s_13;
  half nylerp_14;
  half zxlerp_15;
  float3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_15);
  s_13 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, (float)s_13, (float)nylerp_14));
  s_13 = half(tmpvar_20);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = -(s_13);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, 1.0));
  tmpvar_22.y = s_13;
  half3 tmpvar_23;
  tmpvar_23.xy = half2(float2(1.0, 1.0));
  tmpvar_23.z = -(s_13);
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_23 * tmpvar_11.yxz), mix (((float3)tmpvar_21 * tmpvar_11.xzy), ((float3)tmpvar_22 * tmpvar_11.zxy), (float3)half3(zxlerp_15)), (float3)half3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  float2 tmpvar_25;
  tmpvar_25 = (uv_12 * _mtl_u._DetailScale);
  float2 uvCont_26;
  float2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _mtl_u._DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  float4 tmpvar_28;
  tmpvar_28.xy = dfdx(uvCont_26);
  tmpvar_28.zw = dfdy(uvCont_26);
  half4 tmpvar_29;
  tmpvar_29 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_25), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  float3 tmpvar_31;
  tmpvar_31 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = half(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = ((_mtl_u._Color * tmpvar_10) * mix (tmpvar_30, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_35;
  tmpvar_35 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 59 math, 4 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 0.5, 0, -1, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.x
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.x
mad r0.y, r0.z, c7.x, c7.x
mul r0.xy, r0, c2.x
mov r1.x, c7.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mad_pp r0, r0.w, c6.zzzw, c6.wwwz
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.yyyz
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 57 math, 1 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedlbilnfckafekbockppjjffjmaloejemdabaaaaaaniajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaaiaaaaeaaaaaaaciacaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaaagaabaaaaaaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaabaaaaaackbabaaaafaaaaaaakaabaaaaaaaaaaackaabaia
ebaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaackaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadeaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaaaaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaaaaaaaaaclaaaaafccaabaaaacaaaaaaakaabaaa
aaaaaaaadgaaaaagecaabaaaadaaaaaabkaabaiaebaaaaaaacaaaaaadgaaaaai
dcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaaeaaaaaalganbaaaaaaaaaaaegacbaaaadaaaaaadgaaaaaifcaabaaa
acaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
acaaaaaaegacbaaaacaaaaaajgahbaaaaaaaaaaajgaebaiaebaaaaaaaeaaaaaa
dcaaaaajocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaafgacbaaa
aeaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaalganbaaa
aaaaaaaajgahbaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaaj
ecaabaaaaaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
alaaaaafbcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaaf
ccaabaaaabaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
abaaaaaaaaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaapcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaa
egaobaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadgaaaaafbcaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaaipcaabaaaabaaaaaaagambaaaabaaaaaa
egiocaaaaaaaaaaabbaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaa
abeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 65 math, 2 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half4 v_9;
  v_9 = (tmpvar_8 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_10;
  tmpvar_10.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_12;
  half s_13;
  half nylerp_14;
  half zxlerp_15;
  float3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_11);
  float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_15 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_14 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_15);
  s_13 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_11.y, (float)s_13, (float)nylerp_14));
  s_13 = half(tmpvar_20);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, 1.0));
  tmpvar_21.y = -(s_13);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, 1.0));
  tmpvar_22.y = s_13;
  half3 tmpvar_23;
  tmpvar_23.xy = half2(float2(1.0, 1.0));
  tmpvar_23.z = -(s_13);
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_23 * tmpvar_11.yxz), mix (((float3)tmpvar_21 * tmpvar_11.xzy), ((float3)tmpvar_22 * tmpvar_11.zxy), (float3)half3(zxlerp_15)), (float3)half3(nylerp_14));
  uv_12.x = (((0.5 * tmpvar_24.y) / abs(tmpvar_24.x)) + 0.5);
  uv_12.y = (((0.5 * tmpvar_24.z) / abs(tmpvar_24.x)) + 0.5);
  float2 tmpvar_25;
  tmpvar_25 = (uv_12 * _mtl_u._DetailScale);
  float2 uvCont_26;
  float2 tmpvar_27;
  tmpvar_27 = abs((tmpvar_25 - (0.5 * _mtl_u._DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  float4 tmpvar_28;
  tmpvar_28.xy = dfdx(uvCont_26);
  tmpvar_28.zw = dfdy(uvCont_26);
  half4 tmpvar_29;
  tmpvar_29 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_25), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  float3 tmpvar_31;
  tmpvar_31 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = half(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = ((_mtl_u._Color * tmpvar_10) * mix (tmpvar_30, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_35;
  tmpvar_35 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 88 math, 9 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov_pp r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov_pp r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.z
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.z
mad r0.y, r0.z, c7.z, c7.z
mul r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov_pp r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, -r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r3.xz, r0.xyyw
dsy r0.xy, r0
texldd_pp r4, r1, s0, r3.xzzw, r0
texldd_pp r5, r1, s1, r3.xzzw, r0
cmp_pp r3, r3.y, r4, r5
cmp_pp r0.x, r1.w, r3.z, r3.x
cmp_pp r0.w, r0.w, r0.x, r3.y
mov_pp r0.xyz, r3.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedcbgbmdikeohejkfjadnimabiejlcoeheabaaaaaabaapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnianaaaaeaaaaaaahgadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaaaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaaj
bcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
alaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaa
cgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaf
hcaabaaaabaaaaaapgapbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaadcaaaaak
bcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
akaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaaacaaaaaa
abeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaa
acaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaaabaaaaaa
dgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaaidcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaahhcaabaaa
afaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaadcaaaaaj
ocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaaafaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaaabaaaaaa
jgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabdaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaea
aaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
bfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdo
diaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, (float)zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_8 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  float3 tmpvar_32;
  tmpvar_32 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_33;
  half s_34;
  half nylerp_35;
  half zxlerp_36;
  float3 tmpvar_37;
  tmpvar_37 = abs(tmpvar_32);
  float tmpvar_38;
  tmpvar_38 = float((tmpvar_37.z >= tmpvar_37.x));
  zxlerp_36 = half(tmpvar_38);
  float tmpvar_39;
  tmpvar_39 = float((max (tmpvar_37.x, tmpvar_37.z) >= tmpvar_37.y));
  nylerp_35 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = mix (tmpvar_32.x, tmpvar_32.z, (float)zxlerp_36);
  s_34 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_32.y, (float)s_34, (float)nylerp_35));
  s_34 = half(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xz = half2(float2(1.0, 1.0));
  tmpvar_42.y = -(s_34);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, 1.0));
  tmpvar_43.y = s_34;
  half3 tmpvar_44;
  tmpvar_44.xy = half2(float2(1.0, 1.0));
  tmpvar_44.z = -(s_34);
  float3 tmpvar_45;
  tmpvar_45 = mix (((float3)tmpvar_44 * tmpvar_32.yxz), mix (((float3)tmpvar_42 * tmpvar_32.xzy), ((float3)tmpvar_43 * tmpvar_32.zxy), (float3)half3(zxlerp_36)), (float3)half3(nylerp_35));
  uv_33.x = (((0.5 * tmpvar_45.y) / abs(tmpvar_45.x)) + 0.5);
  uv_33.y = (((0.5 * tmpvar_45.z) / abs(tmpvar_45.x)) + 0.5);
  float2 tmpvar_46;
  tmpvar_46 = (uv_33 * _mtl_u._DetailScale);
  float2 uvCont_47;
  float2 tmpvar_48;
  tmpvar_48 = abs((tmpvar_46 - (0.5 * _mtl_u._DetailScale)));
  uvCont_47.x = max (tmpvar_48.x, tmpvar_48.y);
  uvCont_47.y = min (tmpvar_48.x, tmpvar_48.y);
  float4 tmpvar_49;
  tmpvar_49.xy = dfdx(uvCont_47);
  tmpvar_49.zw = dfdy(uvCont_47);
  half4 tmpvar_50;
  tmpvar_50 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_46), gradient2d((float2)(tmpvar_49.xy), (float2)(tmpvar_49.zw)));
  half4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  float3 tmpvar_52;
  tmpvar_52 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_53;
  float tmpvar_54;
  tmpvar_54 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_52, tmpvar_52)
  )), 0.0, 1.0);
  tmpvar_53 = half(tmpvar_54);
  half4 tmpvar_55;
  tmpvar_55 = ((_mtl_u._Color * tmpvar_31) * mix (tmpvar_51, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_53)));
  color_2 = tmpvar_55;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_56;
  tmpvar_56 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_57;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 86 math, 9 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.z
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.z
mad r0.y, r0.z, c7.z, c7.z
mul r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, -r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r4, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r3.y, r4.w, r0.w
mov r0.xyz, c6.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedkldeagmcogjgibdmidjkmkblgoadefijabaaaaaajeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmanaaaaeaaaaaaafhadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaaaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaaj
bcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
alaaaaafdcaabaaaacaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaa
cgakbaaaaaaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaia
ebaaaaaaabaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaa
bkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaa
acaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaia
ebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaa
abaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaai
dcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaa
dcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaa
afaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaa
abaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaa
acaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaaj
ecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
alaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
acaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaa
aaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaa
dkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaa
aaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
mnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, (float)zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_8 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  half4 v_32;
  v_32 = (tmpvar_31 * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_33;
  tmpvar_33.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  float3 tmpvar_34;
  tmpvar_34 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_35;
  half s_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, (float)zxlerp_38);
  s_36 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, (float)s_36, (float)nylerp_37));
  s_36 = half(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = -(s_36);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, 1.0));
  tmpvar_45.y = s_36;
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = -(s_36);
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_34.yxz), mix (((float3)tmpvar_44 * tmpvar_34.xzy), ((float3)tmpvar_45 * tmpvar_34.zxy), (float3)half3(zxlerp_38)), (float3)half3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  float2 tmpvar_48;
  tmpvar_48 = (uv_35 * _mtl_u._DetailScale);
  float2 uvCont_49;
  float2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _mtl_u._DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_51;
  tmpvar_51.xy = dfdx(uvCont_49);
  tmpvar_51.zw = dfdy(uvCont_49);
  half4 tmpvar_52;
  tmpvar_52 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_48), gradient2d((float2)(tmpvar_51.xy), (float2)(tmpvar_51.zw)));
  half4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  float3 tmpvar_54;
  tmpvar_54 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = ((_mtl_u._Color * tmpvar_33) * mix (tmpvar_53, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 86 math, 9 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.z
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.z
mad r0.y, r0.z, c7.z, c7.z
mul r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, -r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r4, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r3.y, r4.w, r0.w
mov r0.xyz, c6.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedkldeagmcogjgibdmidjkmkblgoadefijabaaaaaajeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmanaaaaeaaaaaaafhadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaaaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaaj
bcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
alaaaaafdcaabaaaacaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaa
cgakbaaaaaaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaia
ebaaaaaaabaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaa
bkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaa
acaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaia
ebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaa
abaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaai
dcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaa
dcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaa
afaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaa
abaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaa
acaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaaj
ecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
alaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
acaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaa
aaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaa
dkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaa
aaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
mnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, (float)zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_8 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  half4 v_32;
  v_32 = (tmpvar_31 * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_33;
  tmpvar_33.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  float3 tmpvar_34;
  tmpvar_34 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_35;
  half s_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, (float)zxlerp_38);
  s_36 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, (float)s_36, (float)nylerp_37));
  s_36 = half(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = -(s_36);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, 1.0));
  tmpvar_45.y = s_36;
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = -(s_36);
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_34.yxz), mix (((float3)tmpvar_44 * tmpvar_34.xzy), ((float3)tmpvar_45 * tmpvar_34.zxy), (float3)half3(zxlerp_38)), (float3)half3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  float2 tmpvar_48;
  tmpvar_48 = (uv_35 * _mtl_u._DetailScale);
  float2 uvCont_49;
  float2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _mtl_u._DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_51;
  tmpvar_51.xy = dfdx(uvCont_49);
  tmpvar_51.zw = dfdy(uvCont_49);
  half4 tmpvar_52;
  tmpvar_52 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_48), gradient2d((float2)(tmpvar_51.xy), (float2)(tmpvar_51.zw)));
  half4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  float3 tmpvar_54;
  tmpvar_54 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = ((_mtl_u._Color * tmpvar_33) * mix (tmpvar_53, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 86 math, 9 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.z
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.z
mad r0.y, r0.z, c7.z, c7.z
mul r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, -r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r0.zw, r0.xyxy
dsy r0.xy, r0
texldd_pp r4, r1, s0, r0.zwzw, r0
texldd_pp r0, r1, s1, r0.zwzw, r0
cmp_pp r0.w, r3.y, r4.w, r0.w
mov r0.xyz, c6.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedkldeagmcogjgibdmidjkmkblgoadefijabaaaaaajeaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmanaaaaeaaaaaaafhadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaaaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaaj
bcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
alaaaaafdcaabaaaacaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaadaaaaaa
cgakbaaaaaaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaia
ebaaaaaaabaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaadgaaaaaihcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaakgbebaaaafaaaaaa
dcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaajbcaabaaaacaaaaaa
bkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaabnaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadbaaaaahecaabaaa
acaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaaabaaaaaackaabaia
ebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaaadaaaaaaakaabaaa
abaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaaadaaaaaadgaaaaai
dcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaiaebaaaaaaafaaaaaa
dcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaaadaaaaaafgacbaaa
afaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaalganbaaa
abaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabdaaaaaa
dcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabdaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaa
acaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaaj
ecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
alaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaa
acaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
adaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaa
bdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaa
aaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaa
dkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaa
aaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
mnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, (float)zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_8 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  half4 v_32;
  v_32 = (tmpvar_31 * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_33;
  tmpvar_33.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  float3 tmpvar_34;
  tmpvar_34 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_35;
  half s_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, (float)zxlerp_38);
  s_36 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, (float)s_36, (float)nylerp_37));
  s_36 = half(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = -(s_36);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, 1.0));
  tmpvar_45.y = s_36;
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = -(s_36);
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_34.yxz), mix (((float3)tmpvar_44 * tmpvar_34.xzy), ((float3)tmpvar_45 * tmpvar_34.zxy), (float3)half3(zxlerp_38)), (float3)half3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  float2 tmpvar_48;
  tmpvar_48 = (uv_35 * _mtl_u._DetailScale);
  float2 uvCont_49;
  float2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _mtl_u._DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_51;
  tmpvar_51.xy = dfdx(uvCont_49);
  tmpvar_51.zw = dfdy(uvCont_49);
  half4 tmpvar_52;
  tmpvar_52 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_48), gradient2d((float2)(tmpvar_51.xy), (float2)(tmpvar_51.zw)));
  half4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  float3 tmpvar_54;
  tmpvar_54 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = ((_mtl_u._Color * tmpvar_33) * mix (tmpvar_53, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 88 math, 9 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5.zxyw
max r1.x, r0_abs.y, r0_abs.x
add r0.w, -r0_abs.z, r1.x
add r1.x, -r0_abs.y, r0_abs.x
cmp_pp r1.y, r1.x, r0.x, r0.y
cmp r1.y, r0.w, r1.y, r0.z
cmp r1.z, -r1.y, c6.z, c6.w
cmp r1.y, r1.y, -c6.z, -c6.w
add_pp r2.y, r1.y, r1.z
mov r2.xz, c6.w
mul r1.yzw, r0.xxyz, r2.xxyz
mov_pp r2.z, -r2.y
mov r2.xy, c6.w
mul r0.xyz, r0.zyxw, r2
cmp r1.xyz, r1.x, r1.yzww, r0.yzxw
cmp r0.xyz, r0.w, r1, r0
mul r0.y, r0.y, c7.z
rcp r0.x, r0_abs.x
mul r0.z, r0.z, r0.x
mad r0.x, r0.y, r0.x, c7.z
mad r0.y, r0.z, c7.z, c7.z
mul r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.z, r1_abs.y
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, -r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r3.xz, r0.xyyw
dsy r0.xy, r0
texldd_pp r4, r1, s0, r3.xzzw, r0
texldd_pp r5, r1, s1, r3.xzzw, r0
cmp_pp r0.xyz, r3.y, r4, r5
cmp_pp r0.x, r1.w, r0.z, r0.x
cmp_pp r0.w, r0.w, r0.x, r0.y
mov r0.xyz, c6.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedljbchmffbajgbbpmkikmkojcflkbehfbabaaaaaabmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoeanaaaaeaaaaaaahjadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaabkbabaaaaeaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaaaaaaaajicaabaaaabaaaaaabkaabaiambaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaadcaaaaakicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaabaaaaaadbaaaaah
ccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaa
bkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaa
dkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaai
fcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaak
ocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaa
abeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaaj
bcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
alaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaa
cgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 3 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((mix (tmpvar_12.x, tmpvar_12.z, (float)zxlerp_10) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (-(tmpvar_11.y), (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_8 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_10), nylerp_9);
  half4 v_32;
  v_32 = (tmpvar_31 * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_33;
  tmpvar_33.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  float3 tmpvar_34;
  tmpvar_34 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_35;
  half s_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_34);
  float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_38 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_37 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = mix (tmpvar_34.x, tmpvar_34.z, (float)zxlerp_38);
  s_36 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_34.y, (float)s_36, (float)nylerp_37));
  s_36 = half(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, 1.0));
  tmpvar_44.y = -(s_36);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, 1.0));
  tmpvar_45.y = s_36;
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = -(s_36);
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_34.yxz), mix (((float3)tmpvar_44 * tmpvar_34.xzy), ((float3)tmpvar_45 * tmpvar_34.zxy), (float3)half3(zxlerp_38)), (float3)half3(nylerp_37));
  uv_35.x = (((0.5 * tmpvar_47.y) / abs(tmpvar_47.x)) + 0.5);
  uv_35.y = (((0.5 * tmpvar_47.z) / abs(tmpvar_47.x)) + 0.5);
  float2 tmpvar_48;
  tmpvar_48 = (uv_35 * _mtl_u._DetailScale);
  float2 uvCont_49;
  float2 tmpvar_50;
  tmpvar_50 = abs((tmpvar_48 - (0.5 * _mtl_u._DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_51;
  tmpvar_51.xy = dfdx(uvCont_49);
  tmpvar_51.zw = dfdy(uvCont_49);
  half4 tmpvar_52;
  tmpvar_52 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_48), gradient2d((float2)(tmpvar_51.xy), (float2)(tmpvar_51.zw)));
  half4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  float3 tmpvar_54;
  tmpvar_54 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = ((_mtl_u._Color * tmpvar_33) * mix (tmpvar_53, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 89 math, 21 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov_pp r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov_pp r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov_pp r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.z
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.z
mad r1.y, r1.z, c7.z, c7.z
mul r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedlacnmngoakednkdnomcndeocdggnbabdabaaaaaajmbaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgeapaaaaeaaaaaaanjadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaa
afaaaaaapgapbaaaaaaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaan
pcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaipcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaa
ahaaaaaadcaaaaajpcaabaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaa
egaobaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaia
ebaaaaaaagaaaaaadcaaaaajpcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaa
aaaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  float3 tmpvar_38;
  tmpvar_38 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_39;
  half s_40;
  half nylerp_41;
  half zxlerp_42;
  float3 tmpvar_43;
  tmpvar_43 = abs(tmpvar_38);
  float tmpvar_44;
  tmpvar_44 = float((tmpvar_43.z >= tmpvar_43.x));
  zxlerp_42 = half(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = float((max (tmpvar_43.x, tmpvar_43.z) >= tmpvar_43.y));
  nylerp_41 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_42);
  s_40 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = sign(mix (tmpvar_38.y, (float)s_40, (float)nylerp_41));
  s_40 = half(tmpvar_47);
  half3 tmpvar_48;
  tmpvar_48.xz = half2(float2(1.0, 1.0));
  tmpvar_48.y = -(s_40);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, 1.0));
  tmpvar_49.y = s_40;
  half3 tmpvar_50;
  tmpvar_50.xy = half2(float2(1.0, 1.0));
  tmpvar_50.z = -(s_40);
  float3 tmpvar_51;
  tmpvar_51 = mix (((float3)tmpvar_50 * tmpvar_38.yxz), mix (((float3)tmpvar_48 * tmpvar_38.xzy), ((float3)tmpvar_49 * tmpvar_38.zxy), (float3)half3(zxlerp_42)), (float3)half3(nylerp_41));
  uv_39.x = (((0.5 * tmpvar_51.y) / abs(tmpvar_51.x)) + 0.5);
  uv_39.y = (((0.5 * tmpvar_51.z) / abs(tmpvar_51.x)) + 0.5);
  float2 tmpvar_52;
  tmpvar_52 = (uv_39 * _mtl_u._DetailScale);
  float2 uvCont_53;
  float2 tmpvar_54;
  tmpvar_54 = abs((tmpvar_52 - (0.5 * _mtl_u._DetailScale)));
  uvCont_53.x = max (tmpvar_54.x, tmpvar_54.y);
  uvCont_53.y = min (tmpvar_54.x, tmpvar_54.y);
  float4 tmpvar_55;
  tmpvar_55.xy = dfdx(uvCont_53);
  tmpvar_55.zw = dfdy(uvCont_53);
  half4 tmpvar_56;
  tmpvar_56 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_52), gradient2d((float2)(tmpvar_55.xy), (float2)(tmpvar_55.zw)));
  half4 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  float3 tmpvar_58;
  tmpvar_58 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_59;
  float tmpvar_60;
  tmpvar_60 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_58, tmpvar_58)
  )), 0.0, 1.0);
  tmpvar_59 = half(tmpvar_60);
  half4 tmpvar_61;
  tmpvar_61 = ((_mtl_u._Color * mix (
    mix (tmpvar_31, tmpvar_33, half4(half((s_8 >= (half)0.0))))
  , 
    mix (mix (tmpvar_27, tmpvar_29, half4(half((s_8 >= (half)0.0)))), mix (tmpvar_35, tmpvar_37, half4(half((s_8 >= (half)0.0)))), half4(zxlerp_10))
  , half4(nylerp_9))) * mix (tmpvar_57, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_59)));
  color_2 = tmpvar_61;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_62;
  tmpvar_62 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_63;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 90 math, 21 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.x, r3.x
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.x, r3.x
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.x, r3.x
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c6.w
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.z
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.z
mad r1.y, r1.z, c7.z, c7.z
mul r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecednpacjiamoklalceoomjgdefpamlnofecabaaaaaalmbaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieapaaaaeaaaaaaaobadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaafaaaaaaakaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaiccaabaaaaaaaaaaaakaabaaaafaaaaaaakaabaiaebaaaaaa
agaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaagaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaa
akaabaaaacaaaaaaakaabaiaebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaadaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, half4(
    half((s_8 >= (half)0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, half4(half((s_8 >= (half)0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, half4(half((s_8 >= (half)0.0))))
  , half4(zxlerp_10)), half4(nylerp_9)) * (half4)float4(1.0, 0.0, 0.0, 0.0));
  half4 tmpvar_39;
  tmpvar_39.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  float3 tmpvar_40;
  tmpvar_40 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_41;
  half s_42;
  half nylerp_43;
  half zxlerp_44;
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, (float)zxlerp_44);
  s_42 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, (float)s_42, (float)nylerp_43));
  s_42 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = -(s_42);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, 1.0));
  tmpvar_51.y = s_42;
  half3 tmpvar_52;
  tmpvar_52.xy = half2(float2(1.0, 1.0));
  tmpvar_52.z = -(s_42);
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_52 * tmpvar_40.yxz), mix (((float3)tmpvar_50 * tmpvar_40.xzy), ((float3)tmpvar_51 * tmpvar_40.zxy), (float3)half3(zxlerp_44)), (float3)half3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  float2 tmpvar_54;
  tmpvar_54 = (uv_41 * _mtl_u._DetailScale);
  float2 uvCont_55;
  float2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _mtl_u._DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  float4 tmpvar_57;
  tmpvar_57.xy = dfdx(uvCont_55);
  tmpvar_57.zw = dfdy(uvCont_55);
  half4 tmpvar_58;
  tmpvar_58 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_54), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float3 tmpvar_60;
  tmpvar_60 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = half(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = ((_mtl_u._Color * tmpvar_39) * mix (tmpvar_59, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_64;
  tmpvar_64 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_R_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 90 math, 21 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.y, r3.y
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.y, r3.y
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.y, r3.y
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c6.w
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.z
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.z
mad r1.y, r1.z, c7.z, c7.z
mul r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedpgdogohoehanmifalnllgckicidcbhppabaaaaaalmbaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieapaaaaeaaaaaaaobadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaaaafaaaaaabkaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaiccaabaaaaaaaaaaabkaabaaaafaaaaaabkaabaiaebaaaaaa
agaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaa
bkaabaaaagaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaa
bkaabaaaacaaaaaabkaabaiaebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaaaaaaaaabkaabaaaadaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, half4(
    half((s_8 >= (half)0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, half4(half((s_8 >= (half)0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, half4(half((s_8 >= (half)0.0))))
  , half4(zxlerp_10)), half4(nylerp_9)) * (half4)float4(0.0, 1.0, 0.0, 0.0));
  half4 tmpvar_39;
  tmpvar_39.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  float3 tmpvar_40;
  tmpvar_40 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_41;
  half s_42;
  half nylerp_43;
  half zxlerp_44;
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, (float)zxlerp_44);
  s_42 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, (float)s_42, (float)nylerp_43));
  s_42 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = -(s_42);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, 1.0));
  tmpvar_51.y = s_42;
  half3 tmpvar_52;
  tmpvar_52.xy = half2(float2(1.0, 1.0));
  tmpvar_52.z = -(s_42);
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_52 * tmpvar_40.yxz), mix (((float3)tmpvar_50 * tmpvar_40.xzy), ((float3)tmpvar_51 * tmpvar_40.zxy), (float3)half3(zxlerp_44)), (float3)half3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  float2 tmpvar_54;
  tmpvar_54 = (uv_41 * _mtl_u._DetailScale);
  float2 uvCont_55;
  float2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _mtl_u._DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  float4 tmpvar_57;
  tmpvar_57.xy = dfdx(uvCont_55);
  tmpvar_57.zw = dfdy(uvCont_55);
  half4 tmpvar_58;
  tmpvar_58 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_54), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float3 tmpvar_60;
  tmpvar_60 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = half(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = ((_mtl_u._Color * tmpvar_39) * mix (tmpvar_59, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_64;
  tmpvar_64 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_G_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 90 math, 21 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.z, r3.z
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.z, r3.z
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.z, r3.z
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c6.w
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.z
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.z
mad r1.y, r1.z, c7.z, c7.z
mul r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedkommoikeenldmbbkbhijhleddihimkhlabaaaaaalmbaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieapaaaaeaaaaaaaobadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaa
aaaaaaaackaabaaaafaaaaaackaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaiccaabaaaaaaaaaaackaabaaaafaaaaaackaabaiaebaaaaaa
agaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaagaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, half4(
    half((s_8 >= (half)0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, half4(half((s_8 >= (half)0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, half4(half((s_8 >= (half)0.0))))
  , half4(zxlerp_10)), half4(nylerp_9)) * (half4)float4(0.0, 0.0, 1.0, 0.0));
  half4 tmpvar_39;
  tmpvar_39.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  float3 tmpvar_40;
  tmpvar_40 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_41;
  half s_42;
  half nylerp_43;
  half zxlerp_44;
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, (float)zxlerp_44);
  s_42 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, (float)s_42, (float)nylerp_43));
  s_42 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = -(s_42);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, 1.0));
  tmpvar_51.y = s_42;
  half3 tmpvar_52;
  tmpvar_52.xy = half2(float2(1.0, 1.0));
  tmpvar_52.z = -(s_42);
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_52 * tmpvar_40.yxz), mix (((float3)tmpvar_50 * tmpvar_40.xzy), ((float3)tmpvar_51 * tmpvar_40.zxy), (float3)half3(zxlerp_44)), (float3)half3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  float2 tmpvar_54;
  tmpvar_54 = (uv_41 * _mtl_u._DetailScale);
  float2 uvCont_55;
  float2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _mtl_u._DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  float4 tmpvar_57;
  tmpvar_57.xy = dfdx(uvCont_55);
  tmpvar_57.zw = dfdy(uvCont_55);
  half4 tmpvar_58;
  tmpvar_58 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_54), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float3 tmpvar_60;
  tmpvar_60 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = half(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = ((_mtl_u._Color * tmpvar_39) * mix (tmpvar_59, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_64;
  tmpvar_64 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_B_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 90 math, 21 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r0.z, r2.y, r4.w, r3.w
texldd_pp r3, r0, s4, r2.xzzw, r1
texldd_pp r4, r0, s5, r2.xzzw, r1
cmp_pp r1.z, r2.y, r4.w, r3.w
cmp_pp r0.z, r1.w, r1.z, r0.z
texldd_pp r3, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r0.x, r2.y, r1.w, r3.w
cmp_pp r0.w, r0.w, r0.z, r0.x
mov r0.xyz, c6.w
mul_pp r0, r0, c1
dp3 r1.x, v5, v5
rsq r1.x, r1.x
mul r1.xyz, r1.x, v5.zxyw
max r2.x, r1_abs.y, r1_abs.x
add r1.w, -r1_abs.z, r2.x
add r2.x, -r1_abs.y, r1_abs.x
cmp_pp r2.y, r2.x, r1.x, r1.y
cmp r2.y, r1.w, r2.y, r1.z
cmp r2.z, -r2.y, c6.z, c6.w
cmp r2.y, r2.y, -c6.z, -c6.w
add_pp r3.y, r2.y, r2.z
mov r3.xz, c6.w
mul r2.yzw, r1.xxyz, r3.xxyz
mov_pp r3.z, -r3.y
mov r3.xy, c6.w
mul r1.xyz, r1.zyxw, r3
cmp r2.xyz, r2.x, r2.yzww, r1.yzxw
cmp r1.xyz, r1.w, r2, r1
mul r1.y, r1.y, c7.z
rcp r1.x, r1_abs.x
mul r1.z, r1.z, r1.x
mad r1.x, r1.y, r1.x, c7.z
mad r1.y, r1.z, c7.z, c7.z
mul r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 95 math
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 432
Vector 272 [_Color]
Float 304 [_DetailScale]
Float 308 [_DetailDist]
Float 340 [_PlanetRadius]
Float 344 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedghpnphdcbacpikkgmljpidkfndgkdidkabaaaaaalmbaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieapaaaaeaaaaaaaobadaaaa
fjaaaaaeegiocaaaaaaaaaaabgaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaibcaabaaa
aaaaaaaadkaabaaaafaaaaaadkaabaiaebaaaaaaagaaaaaadcaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaagaaaaaaejaaaaan
pcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaiccaabaaaaaaaaaaadkaabaaaafaaaaaadkaabaiaebaaaaaa
agaaaaaadcaaaaajccaabaaaaaaaaaaadkaabaaaaaaaaaaabkaabaaaaaaaaaaa
dkaabaaaagaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaiccaabaaaaaaaaaaa
dkaabaaaacaaaaaadkaabaiaebaaaaaaadaaaaaadcaaaaajccaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaadaaaaaaaaaaaaaibcaabaaa
aaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabbaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaaagaabaaaabaaaaaa
kgbebaaaafaaaaaadcaaaaakbcaabaaaacaaaaaackbabaaaafaaaaaaakaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaabnaaaaajccaabaaaacaaaaaabkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaabaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadeaaaaaj
bcaabaaaacaaaaaabkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bnaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
bcaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
dbaaaaahecaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaaabaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
abaaaaaackaabaiaebaaaaaaacaaaaaaakaabaaaabaaaaaaclaaaaafccaabaaa
adaaaaaaakaabaaaabaaaaaadgaaaaagecaabaaaaeaaaaaabkaabaiaebaaaaaa
adaaaaaadgaaaaaidcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadiaaaaahhcaabaaaafaaaaaalganbaaaabaaaaaaegacbaaaaeaaaaaa
dgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaiadpaaaaaaaa
dcaaaaakhcaabaaaadaaaaaaegacbaaaadaaaaaajgahbaaaabaaaaaajgaebaia
ebaaaaaaafaaaaaadcaaaaajocaabaaaacaaaaaafgafbaaaacaaaaaaagajbaaa
adaaaaaafgacbaaaafaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaiaebaaaaaa
aeaaaaaalganbaaaabaaaaaajgahbaaaacaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaafaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabdaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bdaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabdaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabfaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaabfaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 104 math, 7 textures
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float2 uv_6;
  half3 detailCoords_7;
  half s_8;
  half nylerp_9;
  half zxlerp_10;
  float3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  zxlerp_10 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  nylerp_9 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = mix (tmpvar_11.x, tmpvar_11.z, (float)zxlerp_10);
  s_8 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = sign(mix (tmpvar_11.y, (float)s_8, (float)nylerp_9));
  s_8 = half(tmpvar_16);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = -(s_8);
  half3 tmpvar_18;
  tmpvar_18.xz = half2(float2(1.0, -1.0));
  tmpvar_18.y = s_8;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_17 * tmpvar_11.xzy), ((float3)tmpvar_18 * tmpvar_11.zxy), (float3)half3(zxlerp_10));
  detailCoords_7 = half3(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xy = half2(float2(1.0, 1.0));
  tmpvar_20.z = s_8;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_20 * tmpvar_11.yxz), (float3)detailCoords_7, (float3)half3(nylerp_9));
  detailCoords_7 = half3(tmpvar_21);
  half2 tmpvar_22;
  tmpvar_22 = ((((half)0.5 * detailCoords_7.yz) / abs(detailCoords_7.x)) + (half)0.5);
  uv_6 = float2(tmpvar_22);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_6 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(uv_6), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, half4(
    half((s_8 >= (half)0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, half4(half((s_8 >= (half)0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, half4(half((s_8 >= (half)0.0))))
  , half4(zxlerp_10)), half4(nylerp_9)) * (half4)float4(0.0, 0.0, 0.0, 1.0));
  half4 tmpvar_39;
  tmpvar_39.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  float3 tmpvar_40;
  tmpvar_40 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_41;
  half s_42;
  half nylerp_43;
  half zxlerp_44;
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_40);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_44 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_43 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_40.x, tmpvar_40.z, (float)zxlerp_44);
  s_42 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_40.y, (float)s_42, (float)nylerp_43));
  s_42 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, 1.0));
  tmpvar_50.y = -(s_42);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, 1.0));
  tmpvar_51.y = s_42;
  half3 tmpvar_52;
  tmpvar_52.xy = half2(float2(1.0, 1.0));
  tmpvar_52.z = -(s_42);
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_52 * tmpvar_40.yxz), mix (((float3)tmpvar_50 * tmpvar_40.xzy), ((float3)tmpvar_51 * tmpvar_40.zxy), (float3)half3(zxlerp_44)), (float3)half3(nylerp_43));
  uv_41.x = (((0.5 * tmpvar_53.y) / abs(tmpvar_53.x)) + 0.5);
  uv_41.y = (((0.5 * tmpvar_53.z) / abs(tmpvar_53.x)) + 0.5);
  float2 tmpvar_54;
  tmpvar_54 = (uv_41 * _mtl_u._DetailScale);
  float2 uvCont_55;
  float2 tmpvar_56;
  tmpvar_56 = abs((tmpvar_54 - (0.5 * _mtl_u._DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  float4 tmpvar_57;
  tmpvar_57.xy = dfdx(uvCont_55);
  tmpvar_57.zw = dfdy(uvCont_55);
  half4 tmpvar_58;
  tmpvar_58 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(tmpvar_54), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float3 tmpvar_60;
  tmpvar_60 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = half(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = ((_mtl_u._Color * tmpvar_39) * mix (tmpvar_59, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_64;
  tmpvar_64 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_A_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
}
 }
}
}